{"version":3,"sources":["Components/TodayForecast/TodayInfo.tsx","Components/TodayForecast/DataGraph.tsx","Components/TodayForecast/index.tsx","Actions/types.ts","Actions/index.ts","Components/CitySearch/index.tsx","Components/CitySelect/index.tsx","Components/WeeklyForecast/index.tsx","Components/Dashboard/index.tsx","Reducers/weatherReducer.ts","Reducers/index.ts","index.tsx"],"names":["useStyles","makeStyles","theme","todayDate","padding","paddingBottom","display","justifyContent","alignItems","textAlign","todayDateInfo","fontSize","color","todayDateToday","paddingLeft","todayDateDate","todayTemp","fontWeight","todayTempDeg","height","position","top","todayCity","todayCityIcon","cursor","todayExtra","extraFeels","paddingRight","extraSunset","TodayInfo","props","temp","classes","tempScale","useSelector","state","weather","moment","Date","format","Fragment","className","Cloud","data","Math","floor","city","InputOutlined","humidity","sunTime","graphContainer","graphTitles","flexBasis","flexWrap","graphTitleItem","graphItems","graphLineContainer","width","boxSizing","paddingTop","graphDottedLine","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","backgroundClip","graphValueContainer","graphValueLine","background","borderRadius","backgroundColor","DataGraph","yTitles","graphTitle","type","calcBarHeight","value","map","item","key","title","style","todayContainer","todayInfo","alignSelf","graph","TodayForecast","console","log","todayData","graphData","ACTIONS","fetchWeatherData","cityName","dispatch","a","encodeURIComponent","weeklyForecastUrl","axios","get","res","UPDATE_WEEKLY","payload","list","dailyForecastUrl","res2","UPDATE_DAILY","weatherTitle","searchBarContainer","searchBar","popperBar","popperPaper","selected","CitySearch","useDispatch","useState","citySearch","setCitySearch","predictions","setPredictions","selectedPrediction","setSelectedPrediction","popperOpen","setPopperOpen","searchRef","createRef","anchorEl","setAnchorEl","useEffect","current","request","input","types","google","maps","places","AutocompleteService","getPlacePredictions","predictionsCallback","status","PlacesServiceStatus","OK","tempPredictions","forEach","prediction","push","description","handlePredictionSelect","handleSearchSubmit","ref","e","handleAnchorSet","onKeyDown","tempSelected","length","handleArrowNavigate","IconButton","aria-label","Search","InputBase","placeholder","inputProps","onChange","citySearchStr","target","inputRef","Popper","open","placement","Paper","List","i","ListItem","button","onClick","citiesContainer","cityItem","cityImage","OPEN_CAGE_URL","UNPLASH_URL","CitySelect","cities","setCities","selectedCity","citiesData","setCitiesData","navigator","geolocation","getCurrentPosition","pos","query","coords","latitude","longitude","then","results","components","town","name","img","urls","thumb","src","alt","flexDirection","graphDayItem","minWidth","graphOtherItem","graphOtherIcon","graphBars","borderTop","graphValueLineHigh","left","graphValueLineLow","right","WeeklyForecast","weatherIdToFAIcon","weatherId","faClass","substring","convertTempScale","barTempLengths","low","high","tempHigh","weeklyAvg","tempLow","calcHighLowWidth","lowTemp","highTemp","day","Icon","precip","mainContainer","leftContainer","order","citySelectContainer","forecastContainer","rightContainer","initialState","undefined","forecastData","combineReducers","action","UPDATE_TEMP_SCALE","store","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","forecastInfo","forecastProps","setForecastProps","setTodayData","graphProps","setGraphProps","tempForecastArr","tempGraphArr","tempObj","index","main","temp_min","temp_max","dayTemp","icon","unix","dt","rain","snow","round","isNaN","sys","sunset","document","getElementById"],"mappings":"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","file":"static/js/main.ddcb4019.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Cloud, InputOutlined } from '@material-ui/icons';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport moment from 'moment';\r\nimport { useSelector } from 'react-redux';\r\nimport { StoreState } from '../../Reducers';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  todayDate: {\r\n    padding: '1em',\r\n    paddingBottom: '0px',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'left'\r\n  },\r\n  todayDateInfo: {\r\n    padding: '0.5em',\r\n    fontSize: '32px',\r\n    color: 'white'\r\n  },\r\n  todayDateToday: {\r\n    padding: '8px',\r\n    paddingLeft: '0',\r\n    fontSize: '28px',\r\n    color: 'white'\r\n  },\r\n  todayDateDate: {\r\n    fontSize: '16px',\r\n    color: '#9999ac'\r\n  },\r\n  todayTemp: {\r\n    fontSize: '96px',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    fontWeight: 200,\r\n    color: 'white'\r\n  },\r\n  todayTempDeg: {\r\n    height: 'calc(100% - 16px)',\r\n    fontSize: '32px',\r\n    position: 'relative',\r\n    top: '16px'\r\n  },\r\n  todayCity: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: '0.5em'\r\n  },\r\n  todayCityIcon: {\r\n    paddingLeft: '8px',\r\n    color: '#9999ac',\r\n    cursor: 'pointer',\r\n    fontSize: '18px'\r\n  },\r\n  todayExtra: {\r\n    padding: '1em',\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n  },\r\n  extraFeels: {\r\n    paddingRight: '0.8em'\r\n  },\r\n  extraSunset: {\r\n    paddingLeft: '0.8em'\r\n  }\r\n}));\r\n\r\nexport interface TodayInfoProps {\r\n  data: {\r\n    temp: number;\r\n    city: string;\r\n    humidity: number;\r\n    sunTime: string;\r\n  };\r\n}\r\n\r\nexport default function TodayInfo(props: TodayInfoProps) {\r\n  const classes = useStyles({});\r\n  const tempScale = useSelector((state: StoreState) => state.weather.tempScale);\r\n  let todayDate = moment(new Date()).format('ddd, MMM do');\r\n\r\n  // Converts from Kelvin to Celcius / Farenheit depending on current tempScale\r\n  const convertTempScale = (temp: number) => {\r\n    // Kelvin to Celcius\r\n    temp = temp - 273.15;\r\n    if (tempScale === 'farenheit') {\r\n      temp = temp * (9 / 5) + 32;\r\n    }\r\n    return Math.floor(temp * 10) / 10;\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.todayDate}>\r\n        <Cloud />\r\n        <div className={classes.todayDateInfo}>\r\n          <div className={classes.todayDateToday}>Today</div>\r\n          <div className={classes.todayDateDate}>{todayDate}</div>\r\n        </div>\r\n      </div>\r\n      <div className={classes.todayTemp}>\r\n        {convertTempScale(props.data.temp)}\r\n        <div className={classes.todayTempDeg}>{tempScale === 'celsius' ? '°C' : '°F'}</div>\r\n      </div>\r\n      <div className={classes.todayCity}>\r\n        {props.data.city} <InputOutlined className={classes.todayCityIcon} />\r\n      </div>\r\n      <div className={classes.todayExtra}>\r\n        <div className={classes.extraFeels}>Humidity {props.data.humidity} %</div> •{' '}\r\n        <div className={classes.extraSunset}>{props.data.sunTime} Sunset</div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  graphContainer: {\r\n    display: 'flex',\r\n    height: 'calc(100% - 19px)',\r\n    fontSize: '12px'\r\n  },\r\n  graphTitles: {\r\n    display: 'flex',\r\n    flexBasis: '10%',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    flexWrap: 'wrap'\r\n  },\r\n  graphTitleItem: {\r\n    flexBasis: '100%'\r\n  },\r\n  graphItems: {\r\n    flexBasis: '15%',\r\n    display: 'flex',\r\n    alignItems: 'flex-end',\r\n    justifyContent: 'center',\r\n    position: 'relative'\r\n  },\r\n  graphLineContainer: {\r\n    width: '4px',\r\n    height: '100%',\r\n    position: 'absolute',\r\n    boxSizing: 'border-box',\r\n    paddingTop: '3em',\r\n    paddingBottom: '2em'\r\n  },\r\n  graphDottedLine: {\r\n    width: '4px',\r\n    height: '100%',\r\n    position: 'absolute',\r\n    boxSizing: 'border-box',\r\n    paddingTop: '3em',\r\n    paddingBottom: '2em',\r\n    backgroundImage: 'linear-gradient(#9999ac 33%, rgba(255,255,255,0) 0%)',\r\n    backgroundPosition: 'center',\r\n    backgroundSize: '2px 16px',\r\n    backgroundRepeat: 'repeat-y',\r\n    backgroundClip: 'content-box'\r\n  },\r\n  graphValueContainer: {\r\n    width: '12px',\r\n    height: '100%',\r\n    position: 'absolute',\r\n    boxSizing: 'border-box',\r\n    paddingTop: '3em',\r\n    paddingBottom: '2em',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'flex-end'\r\n  },\r\n  graphValueLine: {\r\n    background: '#302e62',\r\n    height: '50%',\r\n    borderRadius: '12px',\r\n    width: '16px',\r\n    '&:hover': {\r\n      backgroundColor: '#f8c500'\r\n    }\r\n  }\r\n}));\r\n\r\nexport interface GraphProps {\r\n  type: 'rain' | 'uv';\r\n  data: { title: string; value: number }[];\r\n}\r\n\r\nexport default function DataGraph(props: GraphProps) {\r\n  const classes = useStyles({});\r\n  // Titles default to rain type\r\n  let yTitles = ['showers', 'rain', 'drizzle'];\r\n  let graphTitle = 'Precipitation';\r\n\r\n  // Create titles bases on type\r\n  if (props.type === 'uv') {\r\n    graphTitle = 'UV Index';\r\n    yTitles = ['low', 'moderate', 'high'];\r\n  }\r\n\r\n  // Calculates Bar height for rain / uv etc..\r\n  const calcBarHeight = (value: number) => {\r\n    if (props.type === 'rain') {\r\n      value = value * 100;\r\n      if (value > 100) {\r\n        value = 100;\r\n      }\r\n      return value;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>{graphTitle}</div>\r\n      <div className={classes.graphContainer}>\r\n        <div className={classes.graphTitles}>\r\n          <div className={classes.graphTitleItem}>{yTitles[0]}</div>\r\n          <div className={classes.graphTitleItem}>{yTitles[1]}</div>\r\n          <div className={classes.graphTitleItem}>{yTitles[2]}</div>\r\n        </div>\r\n        {props.data.map(item => {\r\n          return (\r\n            <div className={classes.graphItems} key={item.title}>\r\n              <div className={classes.graphDottedLine}></div>\r\n              <div className={classes.graphValueContainer}>\r\n                <div className={classes.graphValueLine} style={{ height: `${calcBarHeight(item.value)}%` }} />\r\n              </div>\r\n              {item.title}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport TodayInfo, { TodayInfoProps } from './TodayInfo';\r\nimport DataGraph, { GraphProps } from './DataGraph';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  todayContainer: {\r\n    display: 'flex',\r\n    height: '100%',\r\n    color: 'white',\r\n    flexWrap: 'wrap'\r\n  },\r\n  todayInfo: {\r\n    width: '100%',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n    color: '#9999ac',\r\n    alignSelf: 'flex-end'\r\n  },\r\n  graph: {\r\n    width: '100%',\r\n    height: '30%',\r\n    alignSelf: 'flex-end'\r\n  }\r\n}));\r\n\r\nexport interface TodayForecastProps {\r\n  todayData: TodayInfoProps;\r\n  graphData: GraphProps;\r\n}\r\n\r\nexport default function TodayForecast(props: TodayForecastProps) {\r\n  console.log(props.todayData);\r\n  const classes = useStyles({});\r\n\r\n  return (\r\n    <div className={classes.todayContainer}>\r\n      <div className={classes.todayInfo}>\r\n        <TodayInfo data={props.todayData.data} />\r\n      </div>\r\n      <div className={classes.graph}>\r\n        <DataGraph type={props.graphData.type} data={props.graphData.data} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { string } from 'prop-types';\r\n\r\nexport enum ACTIONS {\r\n  UPDATE_DAILY,\r\n  UPDATE_WEEKLY,\r\n  UPDATE_TEMP_SCALE\r\n}\r\n\r\nexport type WeatherActions = UpdateWeeklyAction | UpdateDailyAction | UpdateTempScale;\r\n\r\n/* Action Types */\r\nexport type UpdateWeeklyAction = {\r\n  type: ACTIONS.UPDATE_WEEKLY;\r\n  payload: WeatherInfo[];\r\n};\r\n\r\nexport type UpdateDailyAction = {\r\n  type: ACTIONS.UPDATE_DAILY;\r\n  payload: TodayInfo;\r\n};\r\n\r\nexport type UpdateTempScale = {\r\n  type: ACTIONS.UPDATE_TEMP_SCALE;\r\n  payload: TempScale;\r\n};\r\n\r\n/* Interfaces for Data coming into Action Creators */\r\n\r\nexport type TempScale = 'celcius' | 'farenheit';\r\n\r\nexport type WeatherInfo = {\r\n  dt: number;\r\n  main: {\r\n    temp: number;\r\n    temp_min: number;\r\n    temp_max: number;\r\n    pressure: number;\r\n    sea_level: number;\r\n    grnd_level: number;\r\n    humidity: number;\r\n    temp_kf: number;\r\n  };\r\n  weather: {\r\n    id: number;\r\n    main: string;\r\n    description: string;\r\n    icon: string;\r\n  }[];\r\n  clouds: {\r\n    all: number;\r\n  };\r\n  wind: {\r\n    speed: number;\r\n    deg: number;\r\n  };\r\n  sys: {\r\n    pod: string;\r\n  };\r\n  snow?: {\r\n    '3h'?: number;\r\n  };\r\n  rain?: {\r\n    '3h'?: number;\r\n  };\r\n  dt_txt: string;\r\n};\r\n\r\nexport type TodayInfo = {\r\n  coord: {\r\n    lon: number;\r\n    lat: number;\r\n  };\r\n  weather: [\r\n    {\r\n      id: number;\r\n      main: string;\r\n      description: string;\r\n      icon: string;\r\n    }\r\n  ];\r\n  base: 'stations';\r\n  main: {\r\n    temp: number;\r\n    pressure: number;\r\n    humidity: number;\r\n    temp_min: number;\r\n    temp_max: number;\r\n  };\r\n  visibility: number;\r\n  wind: {\r\n    speed: number;\r\n    deg: number;\r\n  };\r\n  clouds: {\r\n    all: number;\r\n  };\r\n  dt: number;\r\n  sys: {\r\n    type: 1;\r\n    id: number;\r\n    message: number;\r\n    country: string;\r\n    sunrise: number;\r\n    sunset: number;\r\n  };\r\n  id: number;\r\n  name: string;\r\n  cod: number;\r\n};\r\n","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { ACTIONS } from './types';\r\n\r\nlet WEATHER_KEY = 'e03e2793aa948f9b8e1238d63fbe9d4d';\r\n\r\nexport const fetchWeatherData = (cityName: string) => async (dispatch: Dispatch) => {\r\n  // Get Weekly Forecast\r\n  cityName = encodeURIComponent(cityName);\r\n  let weeklyForecastUrl = `http://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${WEATHER_KEY}`;\r\n  const res = await axios.get(weeklyForecastUrl);\r\n  dispatch({ type: ACTIONS.UPDATE_WEEKLY, payload: res.data.list });\r\n\r\n  // Get Daily Forecast\r\n  let dailyForecastUrl = `http://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${WEATHER_KEY}`;\r\n  const res2 = await axios.get(dailyForecastUrl);\r\n  dispatch({ type: ACTIONS.UPDATE_DAILY, payload: res2.data });\r\n};\r\n","import React, { useEffect, useState, createRef } from 'react';\r\nimport { makeStyles, IconButton, InputBase, Popper, Paper, List, ListItem } from '@material-ui/core';\r\nimport { Search } from '@material-ui/icons';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchWeatherData } from '../../Actions';\r\n/* global google */\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  weatherTitle: {\r\n    fontWeight: 400\r\n  },\r\n  searchBarContainer: {\r\n    display: 'inline-block',\r\n    background: 'white',\r\n    borderRadius: '8px'\r\n  },\r\n  searchBar: {\r\n    width: '250px'\r\n  },\r\n  popperBar: {\r\n    top: '2px',\r\n    width: '298px'\r\n  },\r\n  popperPaper: {\r\n    padding: '1em'\r\n  },\r\n  selected: {\r\n    backgroundColor: 'rgba(0, 0, 0, 0.08)'\r\n  }\r\n}));\r\n\r\nexport default function CitySearch() {\r\n  const classes = useStyles({});\r\n  const dispatch = useDispatch();\r\n  const [citySearch, setCitySearch] = useState('');\r\n  const [predictions, setPredictions] = useState<string[]>();\r\n  const [selectedPrediction, setSelectedPrediction] = useState<number | null>(null);\r\n  const [popperOpen, setPopperOpen] = useState(false);\r\n  const searchRef = createRef<HTMLInputElement>();\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  // Setup Autocomplete server only when Ref is set\r\n  useEffect(() => {\r\n    if (searchRef.current) {\r\n      let request = {\r\n        input: citySearch,\r\n        types: ['(cities)']\r\n      };\r\n      let autocomplete = new google.maps.places.AutocompleteService();\r\n      autocomplete.getPlacePredictions(request, predictionsCallback);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [searchRef]);\r\n\r\n  // Handles Changing places\r\n  const predictionsCallback = (predictions: any, status: any) => {\r\n    if (status !== google.maps.places.PlacesServiceStatus.OK) return;\r\n    let tempPredictions: string[] = [];\r\n    predictions.forEach((prediction: any) => {\r\n      tempPredictions.push(prediction.description);\r\n    });\r\n    setPredictions(tempPredictions);\r\n  };\r\n\r\n  // Handles setting anchor to input\r\n  const handleAnchorSet = (e: any) => {\r\n    if (e && anchorEl === null) {\r\n      setAnchorEl(e);\r\n    }\r\n  };\r\n\r\n  // Handles Submit of the search\r\n  const handleSearchSubmit = (cityName: string) => {\r\n    dispatch(fetchWeatherData(cityName));\r\n  };\r\n\r\n  // Handles on change for search, and autocompletion via Google Places\r\n  const handleSearchChange = (citySearchStr: string) => {\r\n    setCitySearch(citySearchStr);\r\n    setPopperOpen(true);\r\n    if (citySearchStr === '') {\r\n      setPopperOpen(false);\r\n      setSelectedPrediction(null);\r\n    }\r\n  };\r\n\r\n  // Handles clicking on a prediction\r\n  const handlePredictionSelect = (cityName: string) => {\r\n    setPopperOpen(false);\r\n    setCitySearch(cityName);\r\n    handleSearchSubmit(cityName);\r\n  };\r\n\r\n  // Handles ArrowDown + Up to Naviagate Predicitons list\r\n  const handleArrowNavigate = (e: any) => {\r\n    if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {\r\n      let tempSelected = selectedPrediction;\r\n      if (tempSelected === null) {\r\n        tempSelected = -1;\r\n      }\r\n\r\n      if (e.key === 'ArrowDown') {\r\n        tempSelected++;\r\n      } else if (e.key === 'ArrowUp') {\r\n        tempSelected--;\r\n      }\r\n\r\n      if (tempSelected < 0) {\r\n        tempSelected = 0;\r\n      } else if (predictions && tempSelected > predictions.length - 1) {\r\n        tempSelected = predictions.length - 1;\r\n      }\r\n\r\n      setSelectedPrediction(tempSelected);\r\n    } else if (e.key === 'Enter') {\r\n      if (predictions && selectedPrediction !== null) {\r\n        handlePredictionSelect(predictions[selectedPrediction]);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.searchBarContainer} ref={e => handleAnchorSet(e)} onKeyDown={e => handleArrowNavigate(e)}>\r\n        <IconButton aria-label=\"search\">\r\n          <Search />\r\n        </IconButton>\r\n        <InputBase\r\n          className={classes.searchBar}\r\n          placeholder=\"Search new city...\"\r\n          inputProps={{ 'aria-label': 'search google maps' }}\r\n          value={citySearch}\r\n          onChange={e => handleSearchChange(e.target.value)}\r\n          inputRef={searchRef}\r\n        />\r\n      </div>\r\n      <Popper open={popperOpen} anchorEl={anchorEl} placement=\"bottom-start\" className={classes.popperBar}>\r\n        <Paper className={classes.popperPaper}>\r\n          <List>\r\n            {predictions &&\r\n              predictions.map((prediction, i) => {\r\n                return (\r\n                  <ListItem\r\n                    button\r\n                    onClick={() => handlePredictionSelect(prediction)}\r\n                    className={i === selectedPrediction ? classes.selected : ''}\r\n                  >\r\n                    {prediction}\r\n                  </ListItem>\r\n                );\r\n              })}\r\n          </List>\r\n        </Paper>\r\n      </Popper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport CitySearch from '../CitySearch';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchWeatherData } from '../../Actions';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  weatherTitle: {\r\n    fontWeight: 400\r\n  },\r\n  searchBarContainer: {\r\n    display: 'inline-block',\r\n    background: 'white',\r\n    borderRadius: '8px'\r\n  },\r\n  searchBar: {\r\n    width: '250px'\r\n  },\r\n  citiesContainer: {\r\n    display: 'flex'\r\n  },\r\n  cityItem: {\r\n    padding: '1em',\r\n    boxSizing: 'border-box'\r\n  },\r\n  cityName: {\r\n    textAlign: 'center'\r\n  },\r\n  cityImage: {\r\n    height: '180px',\r\n    width: '144px',\r\n    borderRadius: '8px'\r\n  },\r\n  popperBar: {\r\n    top: '2px',\r\n    width: '298px'\r\n  },\r\n  popperPaper: {\r\n    padding: '1em'\r\n  },\r\n  selected: {\r\n    backgroundColor: 'rgba(0, 0, 0, 0.08)'\r\n  }\r\n}));\r\n\r\n// API KEYS\r\nconst OPEN_CAGE_KEY = 'c2ab0fa51f0844fcade0197c0c059111';\r\nconst OPEN_CAGE_URL = `https://api.opencagedata.com/geocode/v1/json?key=${OPEN_CAGE_KEY}&q=`;\r\nconst UNPLASH_KEY = '2d5300fdc7dc99bbacd2a1fca10e4d536a552e7b4f470ee485a987a7748b858b';\r\nconst UNPLASH_URL = `https://api.unsplash.com/search/photos?page=1&per_page=1&client_id=${UNPLASH_KEY}&query=`;\r\n\r\nexport default function CitySelect() {\r\n  const classes = useStyles({});\r\n  const dispatch = useDispatch();\r\n  const [cities, setCities] = useState(['New York']);\r\n  const [selectedCity, setSelectedCity] = useState(cities[0]);\r\n  const [citiesData, setCitiesData] = useState<{ name: string; img: string }[]>();\r\n\r\n  // On load, get geolocation of current city for default\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(pos => {\r\n        let query = pos.coords.latitude + '+' + pos.coords.longitude;\r\n        axios.get(OPEN_CAGE_URL + query).then(res => {\r\n          console.log(res);\r\n          setCities([...cities, res.data.results[0].components.town]);\r\n        });\r\n      });\r\n    }\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  // Watch cities for changes, and do request for city image\r\n  useEffect(() => {\r\n    if (cities) {\r\n      cities.forEach(city => {\r\n        console.log(city);\r\n        axios.get(UNPLASH_URL + city).then(res => {\r\n          setCitiesData([{ name: city, img: res.data.results[0].urls.thumb }]);\r\n        });\r\n      });\r\n    }\r\n  }, [cities]);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchWeatherData(selectedCity));\r\n  }, [selectedCity]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CitySearch />\r\n      <h2>\r\n        <span className={classes.weatherTitle}>Weather</span> Forecast\r\n      </h2>\r\n\r\n      <div className={classes.citiesContainer}>\r\n        {citiesData &&\r\n          citiesData.map(city => {\r\n            return (\r\n              <div className={classes.cityItem} key={city.name}>\r\n                <img className={classes.cityImage} src={city.img} alt={city.name} />\r\n                <div className={classes.cityName}>{city.name}</div>\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, Icon } from '@material-ui/core';\r\nimport './style.css';\r\nimport { StoreState } from '../../Reducers';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  graphContainer: {\r\n    display: 'flex',\r\n    height: '95%',\r\n    fontSize: '12px',\r\n    flexDirection: 'column'\r\n  },\r\n  graphItems: {\r\n    flexBasis: '15%',\r\n    display: 'flex',\r\n    alignItems: 'flex-end',\r\n    position: 'relative'\r\n  },\r\n  graphDayItem: {\r\n    paddingRight: '16px',\r\n    minWidth: '80px',\r\n    color: '#202d5d'\r\n  },\r\n  graphOtherItem: {\r\n    paddingLeft: '16px',\r\n    minWidth: '90px',\r\n    display: 'flex',\r\n    justifyContent: 'flex-start',\r\n    alignItems: 'center',\r\n    color: '#a4afb4',\r\n    fontSize: '16px'\r\n  },\r\n  graphOtherIcon: {\r\n    width: '100%',\r\n    textAlign: 'center'\r\n  },\r\n  graphBars: {\r\n    position: 'relative',\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    alignItems: 'flex-end'\r\n  },\r\n  graphLineContainer: {\r\n    width: '4px',\r\n    height: '100%',\r\n    position: 'absolute',\r\n    boxSizing: 'border-box',\r\n    paddingTop: '3em',\r\n    paddingBottom: '2em'\r\n  },\r\n  graphDottedLine: {\r\n    width: '100%',\r\n    height: '8px',\r\n    position: 'absolute',\r\n    boxSizing: 'border-box',\r\n    borderTop: '3px dotted #d4e3f5'\r\n  },\r\n  graphValueContainer: {\r\n    width: '100%',\r\n    height: '5px',\r\n    position: 'absolute',\r\n    boxSizing: 'border-box',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'flex-end'\r\n  },\r\n  graphValueLineHigh: {\r\n    width: '50%',\r\n    height: '8px',\r\n    background: '#e94b0c',\r\n    position: 'absolute',\r\n    left: '50%',\r\n    borderRadius: '0px 8px 8px 0px',\r\n    top: '-5px'\r\n  },\r\n  graphValueLineLow: {\r\n    width: '50%',\r\n    height: '8px',\r\n    background: '#d4e3f5',\r\n    position: 'absolute',\r\n    right: '50%',\r\n    borderRadius: '8px 0px 0px 8px',\r\n    top: '-5px'\r\n  }\r\n}));\r\n\r\nexport interface ForecastProps {\r\n  type: 'forecast';\r\n  weeklyAvg: number;\r\n  data: {\r\n    day: string;\r\n    precip: string;\r\n    weatherId: string;\r\n    dayTemp: number;\r\n    highTemp: number;\r\n    lowTemp: number;\r\n  }[];\r\n}\r\n\r\nexport default function WeeklyForecast(props: ForecastProps) {\r\n  const classes = useStyles({});\r\n  const tempScale = useSelector((state: StoreState) => state.weather.tempScale);\r\n  // Titles default to rain type\r\n  let graphTitle = 'Precipitation';\r\n\r\n  // Gets the appropriate FA Icon depending on weather ID\r\n  const weatherIdToFAIcon = (weatherId: string) => {\r\n    let faClass = 'fa ';\r\n    let tempWeatherId = weatherId.substring(0, weatherId.length - 1);\r\n    switch (tempWeatherId) {\r\n      case '01':\r\n        faClass += 'fa-sun';\r\n        break;\r\n      case '02':\r\n        faClass += 'fa-cloud-sun';\r\n        break;\r\n      case '03':\r\n        faClass += 'fa-cloud';\r\n        break;\r\n      case '04':\r\n        faClass += 'fa-cloud';\r\n        break;\r\n      case '09':\r\n        faClass += 'fa-cloud-rain';\r\n        break;\r\n      case '10':\r\n        faClass += 'fa-cloud-sun-rain';\r\n        break;\r\n      case '11':\r\n        faClass += 'fa-bolt';\r\n        break;\r\n      case '13':\r\n        faClass += 'fa-snowflake';\r\n        break;\r\n      case '50':\r\n        faClass += 'fa-smog';\r\n        break;\r\n    }\r\n    return faClass;\r\n  };\r\n\r\n  // Calculates using average how wide bars should be\r\n  // Need to make this more meaningful kind of useless atm...\r\n  const calcHighLowWidth = (low: number, high: number) => {\r\n    let tempHigh = (high - props.weeklyAvg) * 5;\r\n    if (tempHigh > 50) tempHigh = 50;\r\n    else if (tempHigh < 0) tempHigh = 0;\r\n    let tempLow = props.weeklyAvg - low;\r\n    if (tempLow > 50) tempLow = 50;\r\n    else if (tempLow < 0) tempLow = 0;\r\n\r\n    return { low: tempLow, high: tempHigh };\r\n  };\r\n\r\n  // Converts from Kelvin to Celcius / Farenheit depending on current tempScale\r\n  const convertTempScale = (temp: number) => {\r\n    // Kelvin to Celcius\r\n    temp = temp - 273.15;\r\n    if (tempScale === 'farenheit') {\r\n      temp = temp * (9 / 5) + 32;\r\n    }\r\n    return Math.floor(temp * 10) / 10 + (tempScale === 'celsius' ? '°C' : '°F');\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>{graphTitle}</div>\r\n      <div className={classes.graphContainer}>\r\n        {props.data.map(item => {\r\n          let barTempLengths = calcHighLowWidth(item.lowTemp, item.highTemp);\r\n          return (\r\n            <div className={classes.graphItems} key={item.day}>\r\n              <div className={classes.graphDayItem}>{item.day}</div>\r\n              <div className={classes.graphOtherItem}>\r\n                <Icon className=\"fa fa-tint\" />\r\n                {item.precip} mm\r\n              </div>\r\n              <div className={classes.graphOtherItem}>\r\n                <Icon className={`${weatherIdToFAIcon(item.weatherId) + ' ' + classes.graphOtherIcon}`} />\r\n              </div>\r\n              <div className={classes.graphOtherItem}>{convertTempScale(item.lowTemp)}</div>\r\n              <div className={classes.graphBars}>\r\n                <div className={classes.graphDottedLine}></div>\r\n                <div className={classes.graphValueContainer}>\r\n                  <div style={{ height: '100%', width: '100%' }}>\r\n                    <div className={classes.graphValueLineLow} style={{ width: `${barTempLengths.low}%` }} />\r\n                    <div className={classes.graphValueLineHigh} style={{ width: `${barTempLengths.high}%` }} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className={classes.graphOtherItem}>{convertTempScale(item.highTemp)}</div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport TodayForecast from '../TodayForecast';\r\nimport CitySelect from '../CitySelect';\r\nimport WeeklyForecast, { ForecastProps } from '../WeeklyForecast';\r\nimport './style.css';\r\nimport { GraphProps } from '../TodayForecast/DataGraph';\r\nimport { TodayInfoProps } from '../TodayForecast/TodayInfo';\r\nimport moment from 'moment';\r\nimport { useSelector } from 'react-redux';\r\nimport { StoreState } from '../../Reducers';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  mainContainer: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    height: '100%',\r\n    padding: '1em',\r\n    boxSizing: 'border-box'\r\n  },\r\n  leftContainer: {\r\n    order: 1,\r\n    flexBasis: '60%',\r\n    height: '100%',\r\n    padding: '32px',\r\n    boxSizing: 'border-box',\r\n    backgroundColor: '#f2fbff',\r\n    borderRadius: '20px 0px 0px 20px'\r\n  },\r\n  citySelectContainer: {\r\n    height: '50%'\r\n  },\r\n  forecastContainer: {\r\n    height: '50%'\r\n  },\r\n  rightContainer: {\r\n    order: 2,\r\n    flexBasis: '40%',\r\n    height: '100%',\r\n    padding: '32px',\r\n    boxSizing: 'border-box',\r\n    backgroundColor: '#100e3b',\r\n    borderRadius: '0px 20px 20px 0px'\r\n  }\r\n}));\r\n\r\nexport default function Dashboard() {\r\n  const classes = useStyles({});\r\n  const forecastInfo = useSelector((state: StoreState) => state.weather.forecastData);\r\n  const todayInfo = useSelector((state: StoreState) => state.weather.todayData);\r\n\r\n  // Props for Weekly Forecast\r\n  const [forecastProps, setForecastProps] = useState<ForecastProps>({\r\n    weeklyAvg: 0,\r\n    type: 'forecast',\r\n    data: []\r\n  });\r\n\r\n  // Props for Today Info Data\r\n  const [todayData, setTodayData] = useState<TodayInfoProps>({\r\n    data: {\r\n      temp: 26,\r\n      city: 'New York, New York',\r\n      humidity: 28,\r\n      sunTime: 'Sunset : 20:18'\r\n    }\r\n  });\r\n\r\n  // Props for Today Info Graph\r\n  const [graphProps, setGraphProps] = useState<GraphProps>({\r\n    type: 'rain',\r\n    data: []\r\n  });\r\n\r\n  // Formats our forecastInfo for the Weekly 5 day chart\r\n  useEffect(() => {\r\n    if (forecastInfo.length > 0) {\r\n      let tempForecastArr: { type: 'forecast'; data: any[]; weeklyAvg: 0 } = {\r\n        weeklyAvg: 0,\r\n        type: 'forecast',\r\n        data: []\r\n      };\r\n      let tempGraphArr: { type: 'rain'; data: any[] } = {\r\n        type: 'rain',\r\n        data: []\r\n      };\r\n\r\n      // Format data for Weekly Forecast\r\n      for (let i = 0; i < 5; i++) {\r\n        let tempObj: any = {};\r\n        let index = i * 8;\r\n        tempObj.lowTemp = forecastInfo[index].main.temp_min;\r\n        tempObj.highTemp = forecastInfo[index].main.temp_max;\r\n        tempObj.dayTemp = forecastInfo[index].main.temp;\r\n        tempObj.weatherId = forecastInfo[index].weather[0].icon;\r\n        tempObj.day = moment.unix(forecastInfo[index].dt).format('ddd, MMM Do');\r\n\r\n        // Depending if we got rain or snow... Kinda shit but we gotta do it...\r\n        if (forecastInfo[index].rain) {\r\n          tempObj.precip = forecastInfo[index].rain;\r\n        } else if (forecastInfo[index].snow) {\r\n          tempObj.precip = forecastInfo[index].snow;\r\n        }\r\n\r\n        if (tempObj.precip) {\r\n          if (tempObj.precip['3h']) {\r\n            tempObj.precip = Math.round(tempObj.precip['3h'] * 100) / 100;\r\n          }\r\n        }\r\n\r\n        if (isNaN(tempObj.precip)) {\r\n          tempObj.precip = 0;\r\n        }\r\n\r\n        tempForecastArr.data.push(tempObj);\r\n        tempForecastArr.weeklyAvg += tempObj.dayTemp;\r\n      }\r\n\r\n      // Format Data for TodayInfo Precipitation Graph\r\n      for (let i = 0; i < 6; i++) {\r\n        let tempObj: any = {};\r\n        tempObj.title = moment.unix(forecastInfo[i].dt).format('h A');\r\n        // Depending if we got rain or snow... Kinda shit but we gotta do it...\r\n        if (forecastInfo[i].rain) {\r\n          tempObj.value = forecastInfo[i].rain;\r\n        } else if (forecastInfo[i].snow) {\r\n          tempObj.value = forecastInfo[i].snow;\r\n        }\r\n        if (tempObj.value) {\r\n          if (tempObj.value['3h']) {\r\n            tempObj.value = Math.round(tempObj.value['3h'] * 100) / 100;\r\n          }\r\n        }\r\n        if (isNaN(tempObj.value)) {\r\n          tempObj.value = 0;\r\n        }\r\n        tempGraphArr.data.push(tempObj);\r\n      }\r\n\r\n      console.log(tempGraphArr);\r\n      tempForecastArr.weeklyAvg /= 5;\r\n\r\n      // Sets forecast and graph data objects\r\n      setForecastProps(tempForecastArr);\r\n      setGraphProps(tempGraphArr);\r\n    }\r\n  }, [forecastInfo]);\r\n\r\n  useEffect(() => {\r\n    if (todayInfo !== undefined) {\r\n      let tempObj: any = { data: {} };\r\n      tempObj.data.city = todayInfo.name;\r\n      tempObj.data.temp = todayInfo.main.temp;\r\n      tempObj.data.sunTime = moment.unix(todayInfo.sys.sunset).format('h:mm A');\r\n      tempObj.data.humidity = todayInfo.main.humidity;\r\n      setTodayData(tempObj);\r\n    }\r\n  }, [todayInfo]);\r\n\r\n  return (\r\n    <div className={classes.mainContainer}>\r\n      <div className={classes.leftContainer}>\r\n        <div className={classes.citySelectContainer}>\r\n          <CitySelect />\r\n        </div>\r\n        <div className={classes.forecastContainer}>\r\n          <WeeklyForecast type={forecastProps.type} data={forecastProps.data} weeklyAvg={forecastProps.weeklyAvg} />\r\n        </div>\r\n      </div>\r\n      <div className={classes.rightContainer}>\r\n        <TodayForecast todayData={todayData} graphData={graphProps} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { ACTIONS, WeatherActions, WeatherInfo, TodayInfo } from '../Actions/types';\r\n\r\nexport interface WeatherStore {\r\n  todayData: TodayInfo | undefined;\r\n  forecastData: WeatherInfo[];\r\n  tempScale: 'celsius' | 'farenheit';\r\n}\r\n\r\nconst initialState: WeatherStore = {\r\n  todayData: undefined,\r\n  forecastData: [],\r\n  tempScale: 'celsius'\r\n};\r\n\r\nexport const weatherReducer = (state: WeatherStore = initialState, action: WeatherActions): WeatherStore => {\r\n  switch (action.type) {\r\n    case ACTIONS.UPDATE_WEEKLY:\r\n      return { ...state, forecastData: action.payload };\r\n    case ACTIONS.UPDATE_DAILY:\r\n      console.log(action);\r\n      return { ...state, todayData: action.payload };\r\n    case ACTIONS.UPDATE_TEMP_SCALE:\r\n      return { ...state };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { weatherReducer, WeatherStore } from './weatherReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport interface StoreState {\r\n  weather: WeatherStore;\r\n}\r\n\r\nexport default combineReducers<StoreState>({\r\n  weather: weatherReducer\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Dashboard from './Components/Dashboard';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport reducers from './Reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware } from 'redux';\n\nconst store = createStore(reducers, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <Dashboard />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}