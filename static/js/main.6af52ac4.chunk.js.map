{"version":3,"sources":["Components/TodayForecast/TodayInfo.tsx","Components/TodayForecast/DataGraph.tsx","Components/TodayForecast/TodayNav.tsx","Actions/types.ts","Actions/index.ts","Components/CitySearch/index.tsx","Components/TodayForecast/index.tsx","Components/CitySelect/index.tsx","Components/WeeklyForecast/index.tsx","Components/Dashboard/index.tsx","Reducers/weatherReducer.ts","Reducers/index.ts","index.tsx"],"names":["useStyles","makeStyles","theme","todayDate","padding","paddingBottom","display","justifyContent","alignItems","textAlign","todayDateInfo","fontSize","color","todayDateIcon","width","todayDateToday","paddingLeft","todayDateDate","todayTemp","fontWeight","todayTempDeg","height","position","top","todayCity","todayCityIcon","cursor","todayExtra","extraFeels","paddingRight","extraSunset","backgroundIcons","overflow","opacity","breakpoints","down","leftIcon","left","topRightIcon","right","rightIcon","zindex","zIndex","TodayInfo","props","temp","classes","tempScale","useSelector","state","weather","moment","Date","format","weatherIdToFAIcon","weatherId","faClass","substring","length","Fragment","className","Icon","data","Math","round","city","InputOutlined","humidity","sunTime","graphContainer","minHeight","graphTitles","flexBasis","flexWrap","graphTitleItem","graphItems","graphLineContainer","boxSizing","paddingTop","graphDottedLine","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","backgroundClip","graphValueContainer","graphValueLine","background","borderRadius","backgroundColor","DataGraph","yTitles","graphTitle","type","calcBarHeight","value","map","item","key","title","style","personIcon","TodayNav","Person","ACTIONS","fetchWeatherData","cityName","dispatch","a","encodeURIComponent","weeklyForecastUrl","_axios_get","res","UPDATE_WEEKLY","payload","list","dailyForecastUrl","res2","UPDATE_DAILY","updateCities","cities","UPDATE_CITIES","addCity","ADD_CITY","updateSelectedCity","UPDATE_SELECTED_CITY","_","memoize","url","axios","get","weatherTitle","searchBarContainer","searchBar","popperBar","popperPaper","selected","CitySearch","citiesList","useDispatch","useState","citySearch","setCitySearch","predictions","setPredictions","selectedPrediction","setSelectedPrediction","popperOpen","setPopperOpen","searchRef","createRef","anchorEl","setAnchorEl","useEffect","current","request","input","types","google","maps","places","AutocompleteService","getPlacePredictions","predictionsCallback","status","PlacesServiceStatus","OK","tempPredictions","forEach","prediction","push","description","handlePredictionSelect","includes","handleSearchSubmit","normalize","replace","ref","e","handleAnchorSet","onKeyDown","tempSelected","handleArrowNavigate","IconButton","aria-label","Search","InputBase","placeholder","inputProps","onChange","citySearchStr","target","inputRef","Popper","open","placement","Paper","List","i","ListItem","button","onClick","todayContainer","todayNav","todayInfo","alignSelf","graph","TodayForecast","smQuery","useMediaQuery","todayData","graphData","citiesContainer","cityItem","marginRight","cityImage","cityMore","OPEN_CAGE_URL","UNPLASH_URL","CitySelect","selectedCity","citiesData","setCitiesData","moreMenuOpen","setMoreMenuOpen","moreMenuCity","setMoreMenuCity","navigator","geolocation","getCurrentPosition","pos","query","coords","latitude","longitude","then","results","components","town","console","log","tempCityData","split","name","img","urls","thumb","fetchImages","MoreVert","src","alt","Menu","id","keepMounted","onClose","MenuItem","handleCityDelete","flexDirection","graphDayItem","minWidth","graphOtherItem","graphOtherIcon","graphBars","borderTop","graphValueLineHigh","graphValueLineLow","smFlex","WeeklyForecast","xsQuery","convertTempScale","barTempLengths","low","high","tempHigh","weeklyAvg","tempLow","calcHighLowWidth","lowTemp","highTemp","day","precip","mainContainer","leftContainer","order","citySelectContainer","forecastContainer","rightContainer","initialState","undefined","forecastData","combineReducers","action","UPDATE_TEMP_SCALE","store","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","forecastInfo","forecastProps","setForecastProps","setTodayData","graphProps","setGraphProps","tempForecastArr","tempGraphArr","tempObj","index","j","main","temp_max","temp_min","dayTemp","icon","unix","dt","rain","snow","isNaN","sys","sunset","document","getElementById"],"mappings":"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","file":"static/js/main.6af52ac4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Cloud, InputOutlined } from '@material-ui/icons';\r\nimport { makeStyles, Icon } from '@material-ui/core';\r\nimport moment from 'moment';\r\nimport { useSelector, ReactReduxContext } from 'react-redux';\r\nimport { StoreState } from '../../Reducers';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  todayDate: {\r\n    padding: '1em',\r\n    paddingBottom: '0px',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'left'\r\n  },\r\n  todayDateInfo: {\r\n    padding: '0.5em',\r\n    fontSize: '32px',\r\n    color: 'white'\r\n  },\r\n  todayDateIcon: {\r\n    width: '40px'\r\n  },\r\n  todayDateToday: {\r\n    padding: '8px',\r\n    paddingLeft: '0',\r\n    fontSize: '28px',\r\n    color: 'white'\r\n  },\r\n  todayDateDate: {\r\n    fontSize: '16px',\r\n    color: '#9999ac'\r\n  },\r\n  todayTemp: {\r\n    fontSize: '96px',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    fontWeight: 200,\r\n    color: 'white'\r\n  },\r\n  todayTempDeg: {\r\n    height: 'calc(100% - 16px)',\r\n    fontSize: '32px',\r\n    position: 'relative',\r\n    top: '16px'\r\n  },\r\n  todayCity: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: '0.5em'\r\n  },\r\n  todayCityIcon: {\r\n    paddingLeft: '8px',\r\n    color: '#9999ac',\r\n    cursor: 'pointer',\r\n    fontSize: '18px'\r\n  },\r\n  todayExtra: {\r\n    padding: '1em',\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n  },\r\n  extraFeels: {\r\n    paddingRight: '0.8em'\r\n  },\r\n  extraSunset: {\r\n    paddingLeft: '0.8em'\r\n  },\r\n  backgroundIcons: {\r\n    position: 'absolute',\r\n    width: 'calc(100% + 64px)',\r\n    height: '100%',\r\n    overflow: 'hidden',\r\n    opacity: '0.6',\r\n    [theme.breakpoints.down('sm')]: {\r\n      width: 'calc(100% + 32px)'\r\n    }\r\n  },\r\n  leftIcon: {\r\n    color: '#1e1d46 !important',\r\n    fontSize: '168px',\r\n    position: 'absolute',\r\n    left: '-81px',\r\n    top: '30%',\r\n    width: '300px'\r\n  },\r\n  topRightIcon: {\r\n    color: '#1e1d46 !important',\r\n    fontSize: '200px',\r\n    position: 'absolute',\r\n    right: '-41px',\r\n    top: '10%',\r\n    width: '200px'\r\n  },\r\n  rightIcon: {\r\n    color: '#1e1d46 !important',\r\n    fontSize: '96px',\r\n    position: 'absolute',\r\n    right: '-61px',\r\n    top: '60%',\r\n    width: '200px'\r\n  },\r\n  zindex: {\r\n    zIndex: 100\r\n  }\r\n}));\r\n\r\nexport interface TodayInfoProps {\r\n  data: {\r\n    temp: number;\r\n    city: string;\r\n    humidity: number;\r\n    sunTime: string;\r\n    weatherId: string;\r\n  };\r\n}\r\n\r\nexport default function TodayInfo(props: TodayInfoProps) {\r\n  const classes = useStyles({});\r\n  const tempScale = useSelector((state: StoreState) => state.weather.tempScale);\r\n  let todayDate = moment(new Date()).format('ddd, MMM Do');\r\n\r\n  // Converts from Kelvin to Celcius / Farenheit depending on current tempScale\r\n  const convertTempScale = (temp: number) => {\r\n    // Kelvin to Celcius\r\n    temp = temp - 273.15;\r\n    if (tempScale === 'farenheit') {\r\n      temp = temp * (9 / 5) + 32;\r\n    }\r\n    return Math.round(temp);\r\n  };\r\n\r\n  // Gets the appropriate FA Icon depending on weather ID\r\n  const weatherIdToFAIcon = (weatherId: string) => {\r\n    let faClass = 'fa ';\r\n    let tempWeatherId = weatherId.substring(0, weatherId.length - 1);\r\n    switch (tempWeatherId) {\r\n      case '01':\r\n        faClass += 'fa-sun';\r\n        break;\r\n      case '02':\r\n        faClass += 'fa-cloud-sun';\r\n        break;\r\n      case '03':\r\n        faClass += 'fa-cloud';\r\n        break;\r\n      case '04':\r\n        faClass += 'fa-cloud';\r\n        break;\r\n      case '09':\r\n        faClass += 'fa-cloud-rain';\r\n        break;\r\n      case '10':\r\n        faClass += 'fa-cloud-sun-rain';\r\n        break;\r\n      case '11':\r\n        faClass += 'fa-bolt';\r\n        break;\r\n      case '13':\r\n        faClass += 'fa-snowflake';\r\n        break;\r\n      case '50':\r\n        faClass += 'fa-smog';\r\n        break;\r\n    }\r\n    return faClass;\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.zindex}>\r\n        <div className={classes.todayDate}>\r\n          <Icon className={`${classes.todayDateIcon} ${weatherIdToFAIcon(props.data.weatherId)}`} />\r\n          <div className={classes.todayDateInfo}>\r\n            <div className={classes.todayDateToday}>Today</div>\r\n            <div className={classes.todayDateDate}>{todayDate}</div>\r\n          </div>\r\n        </div>\r\n        <div className={classes.todayTemp}>\r\n          {convertTempScale(props.data.temp)}\r\n          <div className={classes.todayTempDeg}>{tempScale === 'celsius' ? '°C' : '°F'}</div>\r\n        </div>\r\n        <div className={classes.todayCity}>\r\n          {props.data.city} <InputOutlined className={classes.todayCityIcon} />\r\n        </div>\r\n        <div className={classes.todayExtra}>\r\n          <div className={classes.extraFeels}>Humidity {props.data.humidity} %</div> •{' '}\r\n          <div className={classes.extraSunset}>{props.data.sunTime} Sunset</div>\r\n        </div>\r\n      </div>\r\n      <div className={classes.backgroundIcons}>\r\n        <Icon className={`${classes.leftIcon} ${weatherIdToFAIcon(props.data.weatherId)}`} />\r\n        <Icon className={`${classes.topRightIcon} ${weatherIdToFAIcon(props.data.weatherId)}`} />\r\n        <Icon className={`${classes.rightIcon} ${weatherIdToFAIcon(props.data.weatherId)}`} />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  graphContainer: {\r\n    display: 'flex',\r\n    height: 'calc(100% - 19px)',\r\n    fontSize: '12px',\r\n    [theme.breakpoints.down('sm')]: {\r\n      minHeight: '200px'\r\n    }\r\n  },\r\n  graphTitles: {\r\n    display: 'flex',\r\n    flexBasis: '10%',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    flexWrap: 'wrap'\r\n  },\r\n  graphTitleItem: {\r\n    flexBasis: '100%'\r\n  },\r\n  graphItems: {\r\n    flexBasis: '15%',\r\n    display: 'flex',\r\n    alignItems: 'flex-end',\r\n    justifyContent: 'center',\r\n    position: 'relative'\r\n  },\r\n  graphLineContainer: {\r\n    width: '4px',\r\n    height: '100%',\r\n    position: 'absolute',\r\n    boxSizing: 'border-box',\r\n    paddingTop: '3em',\r\n    paddingBottom: '2em'\r\n  },\r\n  graphDottedLine: {\r\n    width: '4px',\r\n    height: '100%',\r\n    position: 'absolute',\r\n    boxSizing: 'border-box',\r\n    paddingTop: '3em',\r\n    paddingBottom: '2em',\r\n    backgroundImage: 'linear-gradient(#1d1b4b 33%, rgba(255,255,255,0) 0%)',\r\n    backgroundPosition: 'center',\r\n    backgroundSize: '2px 16px',\r\n    backgroundRepeat: 'repeat-y',\r\n    backgroundClip: 'content-box'\r\n  },\r\n  graphValueContainer: {\r\n    width: '12px',\r\n    height: '100%',\r\n    position: 'absolute',\r\n    boxSizing: 'border-box',\r\n    paddingTop: '3em',\r\n    paddingBottom: '2em',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'flex-end'\r\n  },\r\n  graphValueLine: {\r\n    background: '#302e62',\r\n    height: '50%',\r\n    borderRadius: '12px',\r\n    width: '16px',\r\n    '&:hover': {\r\n      backgroundColor: '#f8c500'\r\n    }\r\n  }\r\n}));\r\n\r\nexport interface GraphProps {\r\n  type: 'rain' | 'uv';\r\n  data: { title: string; value: number }[];\r\n}\r\n\r\nexport default function DataGraph(props: GraphProps) {\r\n  const classes = useStyles({});\r\n  // Titles default to rain type\r\n  let yTitles = ['showers', 'rain', 'drizzle'];\r\n  let graphTitle = 'Chance of rain';\r\n\r\n  // Create titles bases on type\r\n  if (props.type === 'uv') {\r\n    graphTitle = 'UV Index';\r\n    yTitles = ['low', 'moderate', 'high'];\r\n  }\r\n\r\n  // Calculates Bar height for rain / uv etc..\r\n  const calcBarHeight = (value: number) => {\r\n    if (props.type === 'rain') {\r\n      value = value * 100;\r\n      if (value > 100) {\r\n        value = 100;\r\n      }\r\n      return value;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>{graphTitle}</div>\r\n      <div className={classes.graphContainer}>\r\n        <div className={classes.graphTitles}>\r\n          <div className={classes.graphTitleItem}>{yTitles[0]}</div>\r\n          <div className={classes.graphTitleItem}>{yTitles[1]}</div>\r\n          <div className={classes.graphTitleItem}>{yTitles[2]}</div>\r\n        </div>\r\n        {props.data.map(item => {\r\n          return (\r\n            <div className={classes.graphItems} key={item.title}>\r\n              <div className={classes.graphDottedLine}></div>\r\n              <div className={classes.graphValueContainer}>\r\n                <div className={classes.graphValueLine} style={{ height: `${calcBarHeight(item.value)}%` }} />\r\n              </div>\r\n              {item.title}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Person } from '@material-ui/icons';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  personIcon: {\r\n    fontSize: '42px'\r\n  },\r\n  item: {\r\n    paddingRight: '2em'\r\n  }\r\n}));\r\n\r\nexport default function TodayNav() {\r\n  const classes = useStyles({});\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n        <span className={classes.item}>Notifcations </span>\r\n        <span>Places</span>\r\n      </div>\r\n      <div>\r\n        <Person className={classes.personIcon} />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import { string } from 'prop-types';\r\n\r\nexport enum ACTIONS {\r\n  UPDATE_DAILY,\r\n  UPDATE_WEEKLY,\r\n  ADD_CITY,\r\n  UPDATE_CITIES,\r\n  UPDATE_SELECTED_CITY,\r\n  UPDATE_TEMP_SCALE\r\n}\r\n\r\nexport type WeatherActions =\r\n  | UpdateWeeklyAction\r\n  | UpdateDailyAction\r\n  | UpdateCitiesAction\r\n  | UpdateSelectedCityAction\r\n  | AddCityAction\r\n  | UpdateTempScale;\r\n\r\n/* Action Types */\r\nexport type UpdateWeeklyAction = {\r\n  type: ACTIONS.UPDATE_WEEKLY;\r\n  payload: WeatherInfo[];\r\n};\r\n\r\nexport type UpdateDailyAction = {\r\n  type: ACTIONS.UPDATE_DAILY;\r\n  payload: TodayInfo;\r\n};\r\n\r\nexport type AddCityAction = {\r\n  type: ACTIONS.ADD_CITY;\r\n  payload: string;\r\n};\r\n\r\nexport type UpdateCitiesAction = {\r\n  type: ACTIONS.UPDATE_CITIES;\r\n  payload: string[];\r\n};\r\n\r\nexport type UpdateSelectedCityAction = {\r\n  type: ACTIONS.UPDATE_SELECTED_CITY;\r\n  payload: string;\r\n};\r\n\r\nexport type UpdateTempScale = {\r\n  type: ACTIONS.UPDATE_TEMP_SCALE;\r\n  payload: TempScale;\r\n};\r\n\r\n/* Interfaces for Data coming into Action Creators */\r\n\r\nexport type TempScale = 'celcius' | 'farenheit';\r\n\r\nexport type WeatherInfo = {\r\n  dt: number;\r\n  main: {\r\n    temp: number;\r\n    temp_min: number;\r\n    temp_max: number;\r\n    pressure: number;\r\n    sea_level: number;\r\n    grnd_level: number;\r\n    humidity: number;\r\n    temp_kf: number;\r\n  };\r\n  weather: {\r\n    id: number;\r\n    main: string;\r\n    description: string;\r\n    icon: string;\r\n  }[];\r\n  clouds: {\r\n    all: number;\r\n  };\r\n  wind: {\r\n    speed: number;\r\n    deg: number;\r\n  };\r\n  sys: {\r\n    pod: string;\r\n  };\r\n  snow?: {\r\n    '3h'?: number;\r\n  };\r\n  rain?: {\r\n    '3h'?: number;\r\n  };\r\n  dt_txt: string;\r\n};\r\n\r\nexport type TodayInfo = {\r\n  coord: {\r\n    lon: number;\r\n    lat: number;\r\n  };\r\n  weather: [\r\n    {\r\n      id: number;\r\n      main: string;\r\n      description: string;\r\n      icon: string;\r\n    }\r\n  ];\r\n  base: 'stations';\r\n  main: {\r\n    temp: number;\r\n    pressure: number;\r\n    humidity: number;\r\n    temp_min: number;\r\n    temp_max: number;\r\n  };\r\n  visibility: number;\r\n  wind: {\r\n    speed: number;\r\n    deg: number;\r\n  };\r\n  clouds: {\r\n    all: number;\r\n  };\r\n  dt: number;\r\n  sys: {\r\n    type: 1;\r\n    id: number;\r\n    message: number;\r\n    country: string;\r\n    sunrise: number;\r\n    sunset: number;\r\n  };\r\n  id: number;\r\n  name: string;\r\n  cod: number;\r\n};\r\n","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { ACTIONS, UpdateCitiesAction, UpdateSelectedCityAction, AddCityAction } from './types';\r\nimport _ from 'lodash';\r\n\r\nlet WEATHER_KEY = 'e03e2793aa948f9b8e1238d63fbe9d4d';\r\n\r\nexport const fetchWeatherData = (cityName: string) => async (dispatch: Dispatch) => {\r\n  // Get Weekly Forecast\r\n  cityName = encodeURIComponent(cityName);\r\n  let weeklyForecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${WEATHER_KEY}`;\r\n  const res = await _axios_get(weeklyForecastUrl);\r\n  dispatch({ type: ACTIONS.UPDATE_WEEKLY, payload: res.data.list });\r\n\r\n  // Get Daily Forecast\r\n  let dailyForecastUrl = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${WEATHER_KEY}`;\r\n  const res2 = await _axios_get(dailyForecastUrl);\r\n  dispatch({ type: ACTIONS.UPDATE_DAILY, payload: res2.data });\r\n};\r\n\r\nexport const updateCities = (cities: string[]): UpdateCitiesAction => ({\r\n  type: ACTIONS.UPDATE_CITIES,\r\n  payload: cities\r\n});\r\n\r\nexport const addCity = (cityName: string): AddCityAction => ({\r\n  type: ACTIONS.ADD_CITY,\r\n  payload: cityName\r\n});\r\n\r\nexport const updateSelectedCity = (cityName: string): UpdateSelectedCityAction => ({\r\n  type: ACTIONS.UPDATE_SELECTED_CITY,\r\n  payload: cityName\r\n});\r\n\r\nconst _axios_get = _.memoize(async (url: string) => {\r\n  const res = await axios.get(url);\r\n  return res;\r\n});\r\n","import React, { useEffect, useState, createRef } from 'react';\r\nimport { makeStyles, IconButton, InputBase, Popper, Paper, List, ListItem } from '@material-ui/core';\r\nimport { Search } from '@material-ui/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchWeatherData, updateSelectedCity, updateCities, addCity } from '../../Actions';\r\nimport { StoreState } from '../../Reducers';\r\n/* global google */\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  weatherTitle: {\r\n    fontWeight: 400\r\n  },\r\n  searchBarContainer: {\r\n    display: 'inline-block',\r\n    background: 'white',\r\n    borderRadius: '8px',\r\n    [theme.breakpoints.down('sm')]: {\r\n      width: '100%'\r\n    }\r\n  },\r\n  searchBar: {\r\n    width: '250px',\r\n    [theme.breakpoints.down('sm')]: {\r\n      width: 'auto'\r\n    }\r\n  },\r\n  popperBar: {\r\n    top: '2px',\r\n    width: '298px'\r\n  },\r\n  popperPaper: {\r\n    padding: '1em'\r\n  },\r\n  selected: {\r\n    backgroundColor: 'rgba(0, 0, 0, 0.08)'\r\n  }\r\n}));\r\n\r\nexport default function CitySearch() {\r\n  const classes = useStyles({});\r\n  const citiesList = useSelector((state: StoreState) => state.weather.cities);\r\n  const dispatch = useDispatch();\r\n\r\n  const [citySearch, setCitySearch] = useState('');\r\n  const [predictions, setPredictions] = useState<string[]>();\r\n  const [selectedPrediction, setSelectedPrediction] = useState<number | null>(null);\r\n  const [popperOpen, setPopperOpen] = useState(false);\r\n  const searchRef = createRef<HTMLInputElement>();\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  // Setup Autocomplete server only when Ref is set\r\n  useEffect(() => {\r\n    if (searchRef.current) {\r\n      let request = {\r\n        input: citySearch,\r\n        types: ['(cities)']\r\n      };\r\n      let autocomplete = new google.maps.places.AutocompleteService();\r\n      autocomplete.getPlacePredictions(request, predictionsCallback);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [searchRef]);\r\n\r\n  // Handles Changing places\r\n  const predictionsCallback = (predictions: any, status: any) => {\r\n    if (status !== google.maps.places.PlacesServiceStatus.OK) return;\r\n    let tempPredictions: string[] = [];\r\n    predictions.forEach((prediction: any) => {\r\n      tempPredictions.push(prediction.description);\r\n    });\r\n    setPredictions(tempPredictions);\r\n  };\r\n\r\n  // Handles setting anchor to input\r\n  const handleAnchorSet = (e: any) => {\r\n    if (e && anchorEl === null) {\r\n      setAnchorEl(e);\r\n    }\r\n  };\r\n\r\n  // Handles Submit of the search\r\n  const handleSearchSubmit = (cityName: string) => {\r\n    if (!citiesList.includes(cityName)) {\r\n      dispatch(addCity(cityName));\r\n    }\r\n    dispatch(updateSelectedCity(cityName));\r\n  };\r\n\r\n  // Handles on change for search, and autocompletion via Google Places\r\n  const handleSearchChange = (citySearchStr: string) => {\r\n    setCitySearch(citySearchStr);\r\n    setPopperOpen(true);\r\n    if (citySearchStr === '') {\r\n      setPopperOpen(false);\r\n      setSelectedPrediction(null);\r\n    }\r\n  };\r\n\r\n  // Handles clicking on a prediction\r\n  const handlePredictionSelect = (cityName: string) => {\r\n    setPopperOpen(false);\r\n    setCitySearch(cityName);\r\n    cityName = cityName.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n    handleSearchSubmit(cityName);\r\n  };\r\n\r\n  // Handles ArrowDown + Up to Naviagate Predicitons list\r\n  const handleArrowNavigate = (e: any) => {\r\n    if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {\r\n      let tempSelected = selectedPrediction;\r\n      if (tempSelected === null) {\r\n        tempSelected = -1;\r\n      }\r\n\r\n      if (e.key === 'ArrowDown') {\r\n        tempSelected++;\r\n      } else if (e.key === 'ArrowUp') {\r\n        tempSelected--;\r\n      }\r\n\r\n      if (tempSelected < 0) {\r\n        tempSelected = 0;\r\n      } else if (predictions && tempSelected > predictions.length - 1) {\r\n        tempSelected = predictions.length - 1;\r\n      }\r\n\r\n      setSelectedPrediction(tempSelected);\r\n    } else if (e.key === 'Enter') {\r\n      if (predictions && selectedPrediction !== null) {\r\n        handlePredictionSelect(predictions[selectedPrediction]);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div style={{ flexBasis: '100%' }}>\r\n        <div\r\n          className={classes.searchBarContainer}\r\n          ref={e => handleAnchorSet(e)}\r\n          onKeyDown={e => handleArrowNavigate(e)}\r\n        >\r\n          <IconButton aria-label=\"search\">\r\n            <Search />\r\n          </IconButton>\r\n          <InputBase\r\n            className={classes.searchBar}\r\n            placeholder=\"Search new place\"\r\n            inputProps={{ 'aria-label': 'search google maps' }}\r\n            value={citySearch}\r\n            onChange={e => handleSearchChange(e.target.value)}\r\n            inputRef={searchRef}\r\n          />\r\n        </div>\r\n      </div>\r\n      <Popper open={popperOpen} anchorEl={anchorEl} placement=\"bottom-start\" className={classes.popperBar}>\r\n        <Paper className={classes.popperPaper}>\r\n          <List>\r\n            {predictions &&\r\n              predictions.map((prediction, i) => {\r\n                return (\r\n                  <ListItem\r\n                    button\r\n                    onClick={() => handlePredictionSelect(prediction)}\r\n                    className={i === selectedPrediction ? classes.selected : ''}\r\n                  >\r\n                    {prediction}\r\n                  </ListItem>\r\n                );\r\n              })}\r\n          </List>\r\n        </Paper>\r\n      </Popper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, useMediaQuery } from '@material-ui/core';\r\nimport TodayInfo, { TodayInfoProps } from './TodayInfo';\r\nimport DataGraph, { GraphProps } from './DataGraph';\r\nimport TodayNav from './TodayNav';\r\nimport CitySearch from '../CitySearch';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  todayContainer: {\r\n    display: 'flex',\r\n    height: '100%',\r\n    color: 'white',\r\n    flexWrap: 'wrap'\r\n  },\r\n  todayNav: {\r\n    height: '5%',\r\n    width: '100%',\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center'\r\n  },\r\n  todayInfo: {\r\n    width: '100%',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n    color: '#9999ac',\r\n    alignSelf: 'flex-end',\r\n    position: 'relative',\r\n    height: '60%',\r\n    display: 'flex'\r\n  },\r\n  graph: {\r\n    width: '100%',\r\n    height: '35%',\r\n    alignSelf: 'flex-end'\r\n  }\r\n}));\r\n\r\nexport interface TodayForecastProps {\r\n  todayData: TodayInfoProps;\r\n  graphData: GraphProps;\r\n}\r\n\r\nexport default function TodayForecast(props: TodayForecastProps) {\r\n  const classes = useStyles({});\r\n  const smQuery = useMediaQuery('(max-width:960px)');\r\n\r\n  return (\r\n    <div className={classes.todayContainer}>\r\n      <div className={classes.todayNav}>{smQuery ? <CitySearch /> : <TodayNav />}</div>\r\n      <div className={classes.todayInfo}>\r\n        <TodayInfo data={props.todayData.data} />\r\n      </div>\r\n      <div className={classes.graph}>\r\n        <DataGraph type={props.graphData.type} data={props.graphData.data} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles, Menu, MenuItem } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport CitySearch from '../CitySearch';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchWeatherData, updateCities, updateSelectedCity } from '../../Actions';\r\nimport { StoreState } from '../../Reducers';\r\nimport { MoreVert } from '@material-ui/icons';\r\nimport _ from 'lodash';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  weatherTitle: {\r\n    fontWeight: 400\r\n  },\r\n  searchBarContainer: {\r\n    display: 'inline-block',\r\n    background: 'white',\r\n    borderRadius: '8px'\r\n  },\r\n  searchBar: {\r\n    width: '250px'\r\n  },\r\n  citiesContainer: {\r\n    display: 'flex',\r\n    paddingBottom: '2em',\r\n    boxSizing: 'border-box'\r\n  },\r\n  cityItem: {\r\n    marginRight: '3em',\r\n    boxSizing: 'border-box',\r\n    cursor: 'pointer',\r\n    position: 'relative'\r\n  },\r\n  cityName: {\r\n    paddingTop: '1em',\r\n    boxSizing: 'border-box',\r\n    textAlign: 'center'\r\n  },\r\n  cityImage: {\r\n    height: '180px',\r\n    width: '144px',\r\n    borderRadius: '8px'\r\n  },\r\n  cityMore: {\r\n    position: 'absolute',\r\n    right: '0.5em',\r\n    top: '0.5em',\r\n    zIndex: 100\r\n  },\r\n  popperBar: {\r\n    top: '2px',\r\n    width: '298px'\r\n  },\r\n  popperPaper: {\r\n    padding: '1em'\r\n  },\r\n  selected: {\r\n    backgroundColor: 'rgba(0, 0, 0, 0.08)'\r\n  }\r\n}));\r\n\r\n// API KEYS\r\nconst OPEN_CAGE_KEY = 'c2ab0fa51f0844fcade0197c0c059111';\r\nconst OPEN_CAGE_URL = `https://api.opencagedata.com/geocode/v1/json?key=${OPEN_CAGE_KEY}&q=`;\r\nconst UNPLASH_KEY = '2d5300fdc7dc99bbacd2a1fca10e4d536a552e7b4f470ee485a987a7748b858b';\r\nconst UNPLASH_URL = `https://api.unsplash.com/search/photos?page=1&per_page=1&client_id=${UNPLASH_KEY}&query=`;\r\n\r\nexport default function CitySelect() {\r\n  const classes = useStyles({});\r\n  const dispatch = useDispatch();\r\n  const citiesList = useSelector((state: StoreState) => state.weather.cities);\r\n  const selectedCity = useSelector((state: StoreState) => state.weather.selectedCity);\r\n  const [citiesData, setCitiesData] = useState<{ name: string; img: string }[]>();\r\n  const [moreMenuOpen, setMoreMenuOpen] = useState(false);\r\n  const [moreMenuCity, setMoreMenuCity] = useState('');\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  // On load, get geolocation of current city for default\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(pos => {\r\n        let query = pos.coords.latitude + '+' + pos.coords.longitude;\r\n        axios.get(OPEN_CAGE_URL + query).then(res => {\r\n          if (res.data.results[0].components.city) {\r\n            dispatch(updateCities(res.data.results[0].components.city));\r\n          } else if (res.data.results[0].components.town) {\r\n            dispatch(updateCities(res.data.results[0].components.town));\r\n          }\r\n        });\r\n      });\r\n    }\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  // Watch cities for changes, and do request for city image\r\n  useEffect(() => {\r\n    const fetchImages = async () => {\r\n      if (citiesList.length > 0) {\r\n        console.log(citiesList);\r\n        let tempCityData: any = [];\r\n        citiesList.forEach(async (city, i) => {\r\n          let cityName = city.split(',')[0];\r\n          cityName = encodeURIComponent(cityName);\r\n          let res = await _axios_get(UNPLASH_URL + cityName);\r\n          tempCityData.push({ name: city, img: res.data.results[0].urls.thumb });\r\n          if (i === citiesList.length - 1) {\r\n            setCitiesData(tempCityData);\r\n          }\r\n        });\r\n      }\r\n    };\r\n    fetchImages();\r\n  }, [citiesList]);\r\n\r\n  // Memoized Axios get\r\n  const _axios_get = _.memoize(async (url: string) => {\r\n    const res = await axios.get(url);\r\n    return res;\r\n  });\r\n\r\n  // Dispatches event to change selected city\r\n  const changeSelectedCity = (cityName: string) => {\r\n    dispatch(updateSelectedCity(cityName));\r\n  };\r\n\r\n  // Handles Opening Menu when City More Clicked\r\n  const handleMenuOpen = (target: any, cityName: string) => {\r\n    setMoreMenuCity(cityName);\r\n    setAnchorEl(target);\r\n    setMoreMenuOpen(true);\r\n  };\r\n\r\n  // Handles Deleting City from our List\r\n  const handleCityDelete = (cityName: string) => {\r\n    let cities: any = [];\r\n    citiesList.forEach(city => {\r\n      if (city !== cityName) {\r\n        cities.push(city);\r\n      }\r\n    });\r\n    setMoreMenuOpen(false);\r\n    dispatch(updateSelectedCity(cities[0]));\r\n    dispatch(updateCities(cities));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CitySearch />\r\n      <h2 style={{ flexBasis: '100%', fontSize: '32px' }}>\r\n        <span className={classes.weatherTitle}>Weather</span> Forecast\r\n      </h2>\r\n\r\n      <div className={classes.citiesContainer} style={{ flexBasis: '100%' }}>\r\n        {citiesData &&\r\n          citiesData.map(city => {\r\n            return (\r\n              <div className={classes.cityItem} key={city.name}>\r\n                <MoreVert className={classes.cityMore} onClick={e => handleMenuOpen(e.target, city.name)} />\r\n                <img\r\n                  className={classes.cityImage}\r\n                  src={city.img}\r\n                  alt={city.name}\r\n                  onClick={() => changeSelectedCity(city.name)}\r\n                />\r\n                <div className={classes.cityName}>{city.name}</div>\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n      <Menu\r\n        id=\"cities-more-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={moreMenuOpen}\r\n        onClose={() => setMoreMenuOpen(false)}\r\n      >\r\n        <MenuItem onClick={() => handleCityDelete(moreMenuCity)}> Remove </MenuItem>\r\n      </Menu>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, Icon, useMediaQuery } from '@material-ui/core';\r\nimport './style.css';\r\nimport { StoreState } from '../../Reducers';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  graphContainer: {\r\n    display: 'flex',\r\n    height: '90%',\r\n    fontSize: '12px',\r\n    flexDirection: 'column'\r\n  },\r\n  graphTitle: {\r\n    paddingLeft: '1em',\r\n    boxSizing: 'border-box',\r\n    display: 'flex',\r\n    [theme.breakpoints.down('sm')]: {\r\n      justifyContent: 'center'\r\n    }\r\n  },\r\n  graphTitleItem: {\r\n    paddingRight: '4em',\r\n    fontSize: '18px',\r\n    color: '#c8d1de',\r\n    [theme.breakpoints.down('sm')]: {\r\n      paddingRight: '2em'\r\n    }\r\n  },\r\n  graphItems: {\r\n    flexBasis: '20%',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    position: 'relative',\r\n    [theme.breakpoints.down('sm')]: {\r\n      flexWrap: 'wrap',\r\n      paddingTop: '2em',\r\n      paddingBottom: '2em'\r\n    }\r\n  },\r\n  graphDayItem: {\r\n    paddingRight: '16px',\r\n    minWidth: '110px',\r\n    color: '#202d5d',\r\n    fontSize: '16px',\r\n    [theme.breakpoints.down('sm')]: {\r\n      textAlign: 'center',\r\n      minWidth: 'auto'\r\n    }\r\n  },\r\n  graphOtherItem: {\r\n    minWidth: '100px',\r\n    display: 'flex',\r\n    justifyContent: 'flex-start',\r\n    alignItems: 'center',\r\n    fontWeight: 500,\r\n    color: '#3b4671',\r\n    fontSize: '16px',\r\n    [theme.breakpoints.down('sm')]: {\r\n      justifyContent: 'center',\r\n      minWidth: 'auto'\r\n    }\r\n  },\r\n  graphOtherIcon: {\r\n    width: '100%',\r\n    textAlign: 'center'\r\n  },\r\n  graphBars: {\r\n    position: 'relative',\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    top: '4px'\r\n  },\r\n  graphLineContainer: {\r\n    width: '4px',\r\n    height: '100%',\r\n    position: 'absolute',\r\n    boxSizing: 'border-box',\r\n    paddingTop: '3em',\r\n    paddingBottom: '2em'\r\n  },\r\n  graphDottedLine: {\r\n    width: '100%',\r\n    height: '8px',\r\n    position: 'absolute',\r\n    boxSizing: 'border-box',\r\n    borderTop: '3px dotted #d4e3f5'\r\n  },\r\n  graphValueContainer: {\r\n    width: '100%',\r\n    height: '5px',\r\n    position: 'absolute',\r\n    boxSizing: 'border-box',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'flex-end'\r\n  },\r\n  graphValueLineHigh: {\r\n    width: '50%',\r\n    height: '8px',\r\n    background: '#e94b0c',\r\n    position: 'absolute',\r\n    left: '50%',\r\n    borderRadius: '0px 8px 8px 0px',\r\n    top: '-5px'\r\n  },\r\n  graphValueLineLow: {\r\n    width: '50%',\r\n    height: '8px',\r\n    background: '#d4e3f5',\r\n    position: 'absolute',\r\n    right: '50%',\r\n    borderRadius: '8px 0px 0px 8px',\r\n    top: '-5px'\r\n  },\r\n  smFlex: {\r\n    display: 'contents',\r\n    [theme.breakpoints.down('sm')]: {\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n      flexBasis: '100%',\r\n      paddingBottom: '2em',\r\n      boxSizing: 'border-box'\r\n    }\r\n  }\r\n}));\r\n\r\nexport interface ForecastProps {\r\n  type: 'forecast';\r\n  weeklyAvg: number;\r\n  data: {\r\n    day: string;\r\n    precip: string;\r\n    weatherId: string;\r\n    dayTemp: number;\r\n    highTemp: number;\r\n    lowTemp: number;\r\n  }[];\r\n}\r\n\r\nexport default function WeeklyForecast(props: ForecastProps) {\r\n  const classes = useStyles({});\r\n  const tempScale = useSelector((state: StoreState) => state.weather.tempScale);\r\n  const selectedCity = useSelector((state: StoreState) => state.weather.selectedCity);\r\n  const xsQuery = useMediaQuery('(max-width:600px)');\r\n  // Titles default to rain type\r\n  let graphTitle = 'Weekly Forecast';\r\n\r\n  // Gets the appropriate FA Icon depending on weather ID\r\n  const weatherIdToFAIcon = (weatherId: string) => {\r\n    let faClass = 'fa ';\r\n    let tempWeatherId = weatherId.substring(0, weatherId.length - 1);\r\n    switch (tempWeatherId) {\r\n      case '01':\r\n        faClass += 'fa-sun';\r\n        break;\r\n      case '02':\r\n        faClass += 'fa-cloud-sun';\r\n        break;\r\n      case '03':\r\n        faClass += 'fa-cloud';\r\n        break;\r\n      case '04':\r\n        faClass += 'fa-cloud';\r\n        break;\r\n      case '09':\r\n        faClass += 'fa-cloud-rain';\r\n        break;\r\n      case '10':\r\n        faClass += 'fa-cloud-sun-rain';\r\n        break;\r\n      case '11':\r\n        faClass += 'fa-bolt';\r\n        break;\r\n      case '13':\r\n        faClass += 'fa-snowflake';\r\n        break;\r\n      case '50':\r\n        faClass += 'fa-smog';\r\n        break;\r\n    }\r\n    return faClass;\r\n  };\r\n\r\n  // Calculates using average how wide bars should be\r\n  // Need to make this more meaningful kind of useless atm...\r\n  const calcHighLowWidth = (low: number, high: number) => {\r\n    let tempHigh = (high - props.weeklyAvg) * 5;\r\n    if (tempHigh > 50) tempHigh = 50;\r\n    else if (tempHigh < 0) tempHigh = 0;\r\n    let tempLow = props.weeklyAvg - low;\r\n    if (tempLow > 50) tempLow = 50;\r\n    else if (tempLow < 0) tempLow = 0;\r\n\r\n    return { low: tempLow, high: tempHigh };\r\n  };\r\n\r\n  // Converts from Kelvin to Celcius / Farenheit depending on current tempScale\r\n  const convertTempScale = (temp: number) => {\r\n    // Kelvin to Celcius\r\n    temp = temp - 273.15;\r\n    if (tempScale === 'farenheit') {\r\n      temp = temp * (9 / 5) + 32;\r\n    }\r\n    return Math.round(temp) + (tempScale === 'celsius' ? '°C' : '°F');\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!xsQuery && (\r\n        <div className={classes.graphTitle}>\r\n          <div className={classes.graphTitleItem}>\r\n            <div style={{ textAlign: 'center', color: '#202b5c' }}>Week</div>\r\n            <div style={{ textAlign: 'center', color: '#202b5c', fontSize: '28px' }}>•</div>\r\n          </div>\r\n          <div className={classes.graphTitleItem}>Month</div>\r\n          <div className={classes.graphTitleItem}>3 Month</div>\r\n          <div className={classes.graphTitleItem}>6 Month</div>\r\n        </div>\r\n      )}\r\n      <div className={classes.graphContainer}>\r\n        {props.data.map(item => {\r\n          let barTempLengths = calcHighLowWidth(item.lowTemp, item.highTemp);\r\n          return (\r\n            <div className={classes.graphItems} key={item.day}>\r\n              <div className={classes.smFlex}>\r\n                <div className={classes.graphDayItem}>{item.day}</div>\r\n                <div className={classes.graphOtherItem}>\r\n                  <Icon className=\"fa fa-tint\" />\r\n                  {item.precip} mm\r\n                </div>\r\n                <div className={classes.graphOtherItem}>\r\n                  <Icon className={`${weatherIdToFAIcon(item.weatherId) + ' ' + classes.graphOtherIcon}`} />\r\n                </div>\r\n              </div>\r\n\r\n              <div className={classes.smFlex}>\r\n                <div className={classes.graphOtherItem}>{convertTempScale(item.lowTemp)}</div>\r\n                <div className={classes.graphBars}>\r\n                  <div className={classes.graphDottedLine}></div>\r\n                  <div className={classes.graphValueContainer}>\r\n                    <div style={{ height: '100%', width: '100%' }}>\r\n                      <div className={classes.graphValueLineLow} style={{ width: `${barTempLengths.low}%` }} />\r\n                      <div className={classes.graphValueLineHigh} style={{ width: `${barTempLengths.high}%` }} />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className={classes.graphOtherItem}>{convertTempScale(item.highTemp)}</div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles, useMediaQuery } from '@material-ui/core';\r\nimport TodayForecast from '../TodayForecast';\r\nimport CitySelect from '../CitySelect';\r\nimport WeeklyForecast, { ForecastProps } from '../WeeklyForecast';\r\nimport './style.css';\r\nimport { GraphProps } from '../TodayForecast/DataGraph';\r\nimport { TodayInfoProps } from '../TodayForecast/TodayInfo';\r\nimport moment from 'moment';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { StoreState } from '../../Reducers';\r\nimport { fetchWeatherData } from '../../Actions';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  mainContainer: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    height: '100%',\r\n    padding: '1em',\r\n    boxSizing: 'border-box',\r\n    [theme.breakpoints.down('sm')]: {\r\n      flexWrap: 'wrap'\r\n    }\r\n  },\r\n  leftContainer: {\r\n    order: 1,\r\n    flexBasis: '70%',\r\n    height: '100%',\r\n    padding: '32px',\r\n    boxSizing: 'border-box',\r\n    backgroundColor: '#f2fbff',\r\n    borderRadius: '20px 0px 0px 20px',\r\n    width: '100%',\r\n    [theme.breakpoints.down('sm')]: {\r\n      order: 2,\r\n      flexBasis: '100%',\r\n      borderRadius: '0px 0px 20px 20px'\r\n    },\r\n    [theme.breakpoints.down('xs')]: {\r\n      padding: '16px'\r\n    }\r\n  },\r\n  citySelectContainer: {\r\n    height: '50%',\r\n    display: 'flex',\r\n    flexWrap: 'wrap'\r\n  },\r\n  forecastContainer: {\r\n    height: '50%'\r\n  },\r\n  rightContainer: {\r\n    order: 2,\r\n    flexBasis: '30%',\r\n    height: '100%',\r\n    padding: '32px',\r\n    boxSizing: 'border-box',\r\n    backgroundColor: '#100e3b',\r\n    borderRadius: '0px 20px 20px 0px',\r\n    width: '100%',\r\n    [theme.breakpoints.down('sm')]: {\r\n      order: 1,\r\n      flexBasis: '100%',\r\n      borderRadius: '20px 20px 0px 0px'\r\n    },\r\n    [theme.breakpoints.down('xs')]: {\r\n      padding: '16px'\r\n    }\r\n  }\r\n}));\r\n\r\nexport default function Dashboard() {\r\n  const classes = useStyles({});\r\n  const dispatch = useDispatch();\r\n  const forecastInfo = useSelector((state: StoreState) => state.weather.forecastData);\r\n  const todayInfo = useSelector((state: StoreState) => state.weather.todayData);\r\n  const selectedCity = useSelector((state: StoreState) => state.weather.selectedCity);\r\n  const smQuery = useMediaQuery('(max-width:960px)');\r\n\r\n  // When city is selected fetch weather data for selected city\r\n  useEffect(() => {\r\n    dispatch(fetchWeatherData(selectedCity));\r\n  }, [selectedCity]);\r\n\r\n  // Props for Weekly Forecast\r\n  const [forecastProps, setForecastProps] = useState<ForecastProps>({\r\n    weeklyAvg: 0,\r\n    type: 'forecast',\r\n    data: []\r\n  });\r\n\r\n  // Props for Today Info Data\r\n  const [todayData, setTodayData] = useState<TodayInfoProps>({\r\n    data: {\r\n      temp: 26,\r\n      city: 'New York, New York',\r\n      humidity: 28,\r\n      sunTime: 'Sunset : 20:18',\r\n      weatherId: '01n'\r\n    }\r\n  });\r\n\r\n  // Props for Today Info Graph\r\n  const [graphProps, setGraphProps] = useState<GraphProps>({\r\n    type: 'rain',\r\n    data: []\r\n  });\r\n\r\n  // Formats our forecastInfo for the Weekly 5 day chart\r\n  useEffect(() => {\r\n    if (forecastInfo.length > 0) {\r\n      let tempForecastArr: { type: 'forecast'; data: any[]; weeklyAvg: 0 } = {\r\n        weeklyAvg: 0,\r\n        type: 'forecast',\r\n        data: []\r\n      };\r\n      let tempGraphArr: { type: 'rain'; data: any[] } = {\r\n        type: 'rain',\r\n        data: []\r\n      };\r\n\r\n      // Format data for Weekly Forecast\r\n      for (let i = 0; i < 5; i++) {\r\n        let tempObj: any = {};\r\n        let index = i * 8;\r\n\r\n        let highTemp = 0;\r\n        let lowTemp = 1000;\r\n        // Calc high + low for this day given the 3 hr windows\r\n        for (let j = 0; j < 8; j++) {\r\n          if (highTemp < forecastInfo[index + j].main.temp_max) {\r\n            highTemp = forecastInfo[index + j].main.temp_max;\r\n          }\r\n          if (lowTemp > forecastInfo[index + j].main.temp_min) {\r\n            lowTemp = forecastInfo[index + j].main.temp_min;\r\n          }\r\n        }\r\n\r\n        tempObj.lowTemp = lowTemp;\r\n        tempObj.highTemp = highTemp;\r\n        tempObj.dayTemp = forecastInfo[index].main.temp;\r\n        tempObj.weatherId = forecastInfo[index].weather[0].icon;\r\n        tempObj.day = moment.unix(forecastInfo[index].dt).format('dddd');\r\n\r\n        // Depending if we got rain or snow... Kinda shit but we gotta do it...\r\n        if (forecastInfo[index].rain) {\r\n          tempObj.precip = forecastInfo[index].rain;\r\n        } else if (forecastInfo[index].snow) {\r\n          tempObj.precip = forecastInfo[index].snow;\r\n        }\r\n\r\n        if (tempObj.precip) {\r\n          if (tempObj.precip['3h']) {\r\n            tempObj.precip = Math.round(tempObj.precip['3h'] * 10) / 10;\r\n          }\r\n        }\r\n\r\n        if (isNaN(tempObj.precip)) {\r\n          tempObj.precip = 0;\r\n        }\r\n\r\n        tempForecastArr.data.push(tempObj);\r\n        tempForecastArr.weeklyAvg += (tempObj.highTemp + tempObj.lowTemp) / 2;\r\n      }\r\n\r\n      // Format Data for TodayInfo Precipitation Graph\r\n      for (let i = 0; i < 6; i++) {\r\n        let tempObj: any = {};\r\n        tempObj.title = moment.unix(forecastInfo[i].dt).format('h A');\r\n        // Depending if we got rain or snow... Kinda shit but we gotta do it...\r\n        if (forecastInfo[i].rain) {\r\n          tempObj.value = forecastInfo[i].rain;\r\n        } else if (forecastInfo[i].snow) {\r\n          tempObj.value = forecastInfo[i].snow;\r\n        }\r\n        if (tempObj.value) {\r\n          if (tempObj.value['3h']) {\r\n            tempObj.value = Math.round(tempObj.value['3h'] * 100) / 100;\r\n          }\r\n        }\r\n        if (isNaN(tempObj.value)) {\r\n          tempObj.value = 0;\r\n        }\r\n        tempGraphArr.data.push(tempObj);\r\n      }\r\n\r\n      tempForecastArr.weeklyAvg /= 5;\r\n\r\n      // Sets forecast and graph data objects\r\n      setForecastProps(tempForecastArr);\r\n      setGraphProps(tempGraphArr);\r\n    }\r\n  }, [forecastInfo]);\r\n\r\n  useEffect(() => {\r\n    if (todayInfo !== undefined) {\r\n      let tempObj: any = { data: {} };\r\n      tempObj.data.city = selectedCity;\r\n      tempObj.data.temp = todayInfo.main.temp;\r\n      tempObj.data.sunTime = moment.unix(todayInfo.sys.sunset).format('h:mm A');\r\n      tempObj.data.humidity = todayInfo.main.humidity;\r\n      tempObj.data.weatherId = todayInfo.weather[0].icon;\r\n      setTodayData(tempObj);\r\n    }\r\n  }, [todayInfo]);\r\n\r\n  return (\r\n    <div className={classes.mainContainer}>\r\n      <div className={classes.leftContainer}>\r\n        {!smQuery && (\r\n          <div className={classes.citySelectContainer}>\r\n            <CitySelect />\r\n          </div>\r\n        )}\r\n        <div className={classes.forecastContainer}>\r\n          <WeeklyForecast type={forecastProps.type} data={forecastProps.data} weeklyAvg={forecastProps.weeklyAvg} />\r\n        </div>\r\n      </div>\r\n      <div className={classes.rightContainer}>\r\n        <TodayForecast todayData={todayData} graphData={graphProps} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { ACTIONS, WeatherActions, WeatherInfo, TodayInfo } from '../Actions/types';\r\n\r\nexport interface WeatherStore {\r\n  todayData: TodayInfo | undefined;\r\n  forecastData: WeatherInfo[];\r\n  cities: string[];\r\n  selectedCity: string;\r\n  tempScale: 'celsius' | 'farenheit';\r\n}\r\n\r\nconst initialState: WeatherStore = {\r\n  todayData: undefined,\r\n  forecastData: [],\r\n  cities: ['New York, NY, USA', 'Paris, France', 'Montreal, QC, Canada'],\r\n  selectedCity: 'New York, NY, USA',\r\n  tempScale: 'celsius'\r\n};\r\n\r\nexport const weatherReducer = (state: WeatherStore = initialState, action: WeatherActions): WeatherStore => {\r\n  switch (action.type) {\r\n    case ACTIONS.UPDATE_WEEKLY:\r\n      return { ...state, forecastData: action.payload };\r\n    case ACTIONS.UPDATE_DAILY:\r\n      return { ...state, todayData: action.payload };\r\n    case ACTIONS.UPDATE_TEMP_SCALE:\r\n      return { ...state };\r\n\r\n    case ACTIONS.ADD_CITY:\r\n      return { ...state, cities: [...state.cities, action.payload] };\r\n    case ACTIONS.UPDATE_CITIES:\r\n      return { ...state, cities: action.payload };\r\n    case ACTIONS.UPDATE_SELECTED_CITY:\r\n      return { ...state, selectedCity: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { weatherReducer, WeatherStore } from './weatherReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport interface StoreState {\r\n  weather: WeatherStore;\r\n}\r\n\r\nexport default combineReducers<StoreState>({\r\n  weather: weatherReducer\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Dashboard from './Components/Dashboard';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport reducers from './Reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware } from 'redux';\n\nconst store = createStore(reducers, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <Dashboard />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}