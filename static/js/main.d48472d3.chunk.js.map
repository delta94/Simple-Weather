{"version":3,"sources":["Components/TodayForecast/TodayInfo.tsx","Components/TodayForecast/DataGraph.tsx","Components/TodayForecast/index.tsx","Components/CitySelect/index.tsx","Components/WeeklyForecast/index.tsx","Components/Dashboard/index.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","todayDate","padding","paddingBottom","display","justifyContent","alignItems","textAlign","todayDateInfo","fontSize","color","todayDateToday","paddingLeft","todayDateDate","todayTemp","fontWeight","todayTempDeg","height","position","top","todayCity","todayCityIcon","cursor","todayExtra","extraFeels","paddingRight","extraSunset","TodayInfo","props","classes","moment","Date","format","Fragment","className","Cloud","data","temp","city","InputOutlined","feelsLike","sunTime","graphContainer","graphTitles","flexBasis","flexWrap","graphTitleItem","graphItems","graphLineContainer","width","boxSizing","paddingTop","graphDottedLine","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","backgroundClip","graphValueContainer","graphValueLine","background","borderRadius","backgroundColor","DataGraph","yTitles","graphTitle","type","map","item","key","title","style","value","todayContainer","todayInfo","alignSelf","graph","TodayForecast","todayData","graphData","weatherTitle","searchBarContainer","searchBar","citiesContainer","cityItem","cityName","cityImage","popperBar","popperPaper","selected","OPEN_CAGE_URL","UNPLASH_URL","CitySelect","useState","cities","setCities","citiesData","setCitiesData","citySearch","setCitySearch","predictions","setPredictions","selectedPrediction","setSelectedPrediction","popperOpen","setPopperOpen","searchRef","createRef","anchorEl","setAnchorEl","useEffect","navigator","geolocation","getCurrentPosition","pos","query","coords","latitude","longitude","axios","get","then","res","results","components","forEach","name","img","urls","thumb","current","request","input","types","google","maps","places","AutocompleteService","getPlacePredictions","predictionsCallback","status","PlacesServiceStatus","OK","tempPredictions","prediction","push","description","handlePredictionSelect","ref","e","handleAnchorSet","onKeyDown","tempSelected","length","console","log","handleArrowNavigate","IconButton","aria-label","Search","InputBase","placeholder","inputProps","onChange","citySearchStr","target","inputRef","src","Popper","open","placement","Paper","List","i","ListItem","button","onClick","flexDirection","graphDayItem","minWidth","graphOtherItem","graphOtherIcon","graphBars","borderTop","graphValueLineHigh","left","graphValueLineLow","right","WeeklyForecast","weatherIdToFAIcon","weatherId","faClass","substring","barTempLengths","low","high","avg","tempHigh","tempLow","calcHighLowWidth","lowTemp","highTemp","day","Icon","precip","mainContainer","leftContainer","order","citySelectContainer","forecastContainer","rightContainer","ReactDOM","render","forecastProps","dayTemp","document","getElementById"],"mappings":"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","file":"static/js/main.d48472d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Cloud, InputOutlined } from '@material-ui/icons';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport moment from 'moment';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  todayDate: {\r\n    padding: '1em',\r\n    paddingBottom: '0px',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'left'\r\n  },\r\n  todayDateInfo: {\r\n    padding: '0.5em',\r\n    fontSize: '32px',\r\n    color: 'white'\r\n  },\r\n  todayDateToday: {\r\n    padding: '8px',\r\n    paddingLeft: '0',\r\n    fontSize: '28px',\r\n    color: 'white'\r\n  },\r\n  todayDateDate: {\r\n    fontSize: '16px',\r\n    color: '#9999ac'\r\n  },\r\n  todayTemp: {\r\n    fontSize: '96px',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    fontWeight: 200,\r\n    color: 'white'\r\n  },\r\n  todayTempDeg: {\r\n    height: 'calc(100% - 16px)',\r\n    fontSize: '32px',\r\n    position: 'relative',\r\n    top: '16px'\r\n  },\r\n  todayCity: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: '0.5em'\r\n  },\r\n  todayCityIcon: {\r\n    paddingLeft: '8px',\r\n    color: '#9999ac',\r\n    cursor: 'pointer',\r\n    fontSize: '18px'\r\n  },\r\n  todayExtra: {\r\n    padding: '1em',\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n  },\r\n  extraFeels: {\r\n    paddingRight: '0.8em'\r\n  },\r\n  extraSunset: {\r\n    paddingLeft: '0.8em'\r\n  }\r\n}));\r\n\r\nexport interface TodayInfoProps {\r\n  data: {\r\n    temp: number;\r\n    city: string;\r\n    feelsLike: number;\r\n    sunTime: string;\r\n  };\r\n}\r\n\r\nexport default function TodayInfo(props: TodayInfoProps) {\r\n  const classes = useStyles({});\r\n  let todayDate = moment(new Date()).format('ddd, MMM do');\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.todayDate}>\r\n        <Cloud />\r\n        <div className={classes.todayDateInfo}>\r\n          <div className={classes.todayDateToday}>Today</div>\r\n          <div className={classes.todayDateDate}>{todayDate}</div>\r\n        </div>\r\n      </div>\r\n      <div className={classes.todayTemp}>\r\n        {props.data.temp}\r\n        <div className={classes.todayTempDeg}>°C</div>\r\n      </div>\r\n      <div className={classes.todayCity}>\r\n        {props.data.city} <InputOutlined className={classes.todayCityIcon} />\r\n      </div>\r\n      <div className={classes.todayExtra}>\r\n        <div className={classes.extraFeels}>Feels Like {props.data.feelsLike}</div> •{' '}\r\n        <div className={classes.extraSunset}>{props.data.sunTime}</div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  graphContainer: {\r\n    display: 'flex',\r\n    height: 'calc(100% - 19px)',\r\n    fontSize: '12px'\r\n  },\r\n  graphTitles: {\r\n    display: 'flex',\r\n    flexBasis: '10%',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    flexWrap: 'wrap'\r\n  },\r\n  graphTitleItem: {\r\n    flexBasis: '100%'\r\n  },\r\n  graphItems: {\r\n    flexBasis: '15%',\r\n    display: 'flex',\r\n    alignItems: 'flex-end',\r\n    justifyContent: 'center',\r\n    position: 'relative'\r\n  },\r\n  graphLineContainer: {\r\n    width: '4px',\r\n    height: '100%',\r\n    position: 'absolute',\r\n    boxSizing: 'border-box',\r\n    paddingTop: '3em',\r\n    paddingBottom: '2em'\r\n  },\r\n  graphDottedLine: {\r\n    width: '4px',\r\n    height: '100%',\r\n    position: 'absolute',\r\n    boxSizing: 'border-box',\r\n    paddingTop: '3em',\r\n    paddingBottom: '2em',\r\n    backgroundImage: 'linear-gradient(#9999ac 33%, rgba(255,255,255,0) 0%)',\r\n    backgroundPosition: 'center',\r\n    backgroundSize: '2px 16px',\r\n    backgroundRepeat: 'repeat-y',\r\n    backgroundClip: 'content-box'\r\n  },\r\n  graphValueContainer: {\r\n    width: '12px',\r\n    height: '100%',\r\n    position: 'absolute',\r\n    boxSizing: 'border-box',\r\n    paddingTop: '3em',\r\n    paddingBottom: '2em',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'flex-end'\r\n  },\r\n  graphValueLine: {\r\n    background: '#302e62',\r\n    height: '50%',\r\n    borderRadius: '12px',\r\n    width: '16px',\r\n    '&:hover': {\r\n      backgroundColor: '#f8c500'\r\n    }\r\n  }\r\n}));\r\n\r\nexport interface GraphProps {\r\n  type: 'rain' | 'uv';\r\n  data: { title: string; value: number }[];\r\n}\r\n\r\nexport default function DataGraph(props: GraphProps) {\r\n  const classes = useStyles({});\r\n  // Titles default to rain type\r\n  let yTitles = ['showers', 'rain', 'drizzle'];\r\n  let graphTitle = 'Precipitation';\r\n\r\n  // Create titles bases on type\r\n  if (props.type === 'uv') {\r\n    graphTitle = 'UV Index';\r\n    yTitles = ['low', 'moderate', 'high'];\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>{graphTitle}</div>\r\n      <div className={classes.graphContainer}>\r\n        <div className={classes.graphTitles}>\r\n          <div className={classes.graphTitleItem}>{yTitles[0]}</div>\r\n          <div className={classes.graphTitleItem}>{yTitles[1]}</div>\r\n          <div className={classes.graphTitleItem}>{yTitles[2]}</div>\r\n        </div>\r\n        {props.data.map(item => {\r\n          return (\r\n            <div className={classes.graphItems} key={item.title}>\r\n              <div className={classes.graphDottedLine}></div>\r\n              <div className={classes.graphValueContainer}>\r\n                <div className={classes.graphValueLine} style={{ height: `${item.value}%` }} />\r\n              </div>\r\n              {item.title}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport TodayInfo, { TodayInfoProps } from './TodayInfo';\r\nimport DataGraph, { GraphProps } from './DataGraph';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  todayContainer: {\r\n    display: 'flex',\r\n    height: '100%',\r\n    color: 'white',\r\n    flexWrap: 'wrap'\r\n  },\r\n  todayInfo: {\r\n    width: '100%',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n    color: '#9999ac',\r\n    alignSelf: 'flex-end'\r\n  },\r\n  graph: {\r\n    width: '100%',\r\n    height: '30%',\r\n    alignSelf: 'flex-end'\r\n  }\r\n}));\r\n\r\nexport interface TodayForecastProps {\r\n  todayData: TodayInfoProps;\r\n  graphData: GraphProps;\r\n}\r\n\r\nexport default function TodayForecast(props: TodayForecastProps) {\r\n  const classes = useStyles({});\r\n  const today = new Date();\r\n\r\n  return (\r\n    <div className={classes.todayContainer}>\r\n      <div className={classes.todayInfo}>\r\n        <TodayInfo data={props.todayData.data} />\r\n      </div>\r\n      <div className={classes.graph}>\r\n        <DataGraph type={props.graphData.type} data={props.graphData.data} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useRef, createRef } from 'react';\r\nimport { makeStyles, IconButton, InputBase, Popper, Paper, List, ListItem, Icon } from '@material-ui/core';\r\nimport { Search, Add } from '@material-ui/icons';\r\nimport axios from 'axios';\r\n/* global google */\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  weatherTitle: {\r\n    fontWeight: 400\r\n  },\r\n  searchBarContainer: {\r\n    display: 'inline-block',\r\n    background: 'white',\r\n    borderRadius: '8px'\r\n  },\r\n  searchBar: {\r\n    width: '250px'\r\n  },\r\n  citiesContainer: {\r\n    display: 'flex'\r\n  },\r\n  cityItem: {\r\n    padding: '1em',\r\n    boxSizing: 'border-box'\r\n  },\r\n  cityName: {\r\n    textAlign: 'center'\r\n  },\r\n  cityImage: {\r\n    height: '180px',\r\n    width: '144px',\r\n    borderRadius: '8px'\r\n  },\r\n  popperBar: {\r\n    top: '2px',\r\n    width: '298px'\r\n  },\r\n  popperPaper: {\r\n    padding: '1em'\r\n  },\r\n  selected: {\r\n    backgroundColor: 'rgba(0, 0, 0, 0.08)'\r\n  }\r\n}));\r\n\r\n// API KEYS\r\nconst OPEN_CAGE_KEY = 'c2ab0fa51f0844fcade0197c0c059111';\r\nconst OPEN_CAGE_URL = `https://api.opencagedata.com/geocode/v1/json?key=${OPEN_CAGE_KEY}&q=`;\r\nconst UNPLASH_KEY = '2d5300fdc7dc99bbacd2a1fca10e4d536a552e7b4f470ee485a987a7748b858b';\r\nconst UNPLASH_URL = `https://api.unsplash.com/search/photos?page=1&per_page=1&client_id=${UNPLASH_KEY}&query=`;\r\nconst GPLACES_KEY = 'AIzaSyA4mxHvWDDKTOKj0_jYCwygGY2Qzc209Xg';\r\nconst GPLACES_URL = `https://maps.googleapis.com/maps/api/place/autocomplete/json?types=(cities)&key=${GPLACES_KEY}&input=`;\r\n\r\nexport default function CitySelect() {\r\n  const classes = useStyles({});\r\n  const [cities, setCities] = useState(['Montreal']);\r\n  const [citiesData, setCitiesData] = useState<{ name: string; img: string }[]>();\r\n  const [citySearch, setCitySearch] = useState('');\r\n  const [predictions, setPredictions] = useState<string[]>();\r\n  const [selectedPrediction, setSelectedPrediction] = useState<number | null>(null);\r\n  const [popperOpen, setPopperOpen] = useState(false);\r\n  const searchRef = createRef<HTMLInputElement>();\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  // On load, get geolocation of current city for default\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(pos => {\r\n        let query = pos.coords.latitude + '+' + pos.coords.longitude;\r\n        axios.get(OPEN_CAGE_URL + query).then(res => {\r\n          setCities([...cities, res.data.results[0].components.city]);\r\n        });\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  // Watch cities for changes, and do request for city image\r\n  useEffect(() => {\r\n    cities.forEach(city => {\r\n      axios.get(UNPLASH_URL + city).then(res => {\r\n        setCitiesData([{ name: city, img: res.data.results[0].urls.thumb }]);\r\n      });\r\n    });\r\n  }, [cities]);\r\n\r\n  // Setup Autocomplete server only when Ref is set\r\n  useEffect(() => {\r\n    if (searchRef.current) {\r\n      let request = {\r\n        input: citySearch,\r\n        types: ['(cities)']\r\n      };\r\n      let autocomplete = new google.maps.places.AutocompleteService();\r\n      autocomplete.getPlacePredictions(request, predictionsCallback);\r\n    }\r\n  }, [searchRef]);\r\n\r\n  // Handles Changing places\r\n  const predictionsCallback = (predictions: any, status: any) => {\r\n    if (status != google.maps.places.PlacesServiceStatus.OK) return;\r\n    let tempPredictions: string[] = [];\r\n    predictions.forEach((prediction: any) => {\r\n      tempPredictions.push(prediction.description);\r\n    });\r\n    setPredictions(tempPredictions);\r\n  };\r\n\r\n  // Handles setting anchor to input\r\n  const handleAnchorSet = (e: any) => {\r\n    if (e && anchorEl === null) {\r\n      setAnchorEl(e);\r\n    }\r\n  };\r\n\r\n  // Handles on change for search, and autocompletion via Google Places\r\n  const handleSearchChange = (citySearchStr: string) => {\r\n    setCitySearch(citySearchStr);\r\n    setPopperOpen(true);\r\n    if (citySearchStr === '') {\r\n      setPopperOpen(false);\r\n      setSelectedPrediction(null);\r\n    }\r\n  };\r\n\r\n  // Handles clicking on a prediction\r\n  const handlePredictionSelect = (cityName: string) => {\r\n    setPopperOpen(false);\r\n    setCitySearch(cityName);\r\n  };\r\n\r\n  // Handles ArrowDown + Up to Naviagate Predicitons list\r\n  const handleArrowNavigate = (e: any) => {\r\n    if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {\r\n      let tempSelected = selectedPrediction;\r\n      if (tempSelected === null) {\r\n        tempSelected = -1;\r\n      }\r\n\r\n      if (e.key === 'ArrowDown') {\r\n        tempSelected++;\r\n      } else if (e.key === 'ArrowUp') {\r\n        tempSelected--;\r\n      }\r\n\r\n      if (tempSelected < 0) {\r\n        tempSelected = 0;\r\n      } else if (predictions && tempSelected > predictions.length - 1) {\r\n        tempSelected = predictions.length - 1;\r\n      }\r\n\r\n      setSelectedPrediction(tempSelected);\r\n    } else if (e.key === 'Enter') {\r\n      if (predictions && selectedPrediction !== null) {\r\n        console.log(predictions[0]);\r\n        handlePredictionSelect(predictions[selectedPrediction]);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.searchBarContainer} ref={e => handleAnchorSet(e)} onKeyDown={e => handleArrowNavigate(e)}>\r\n        <IconButton aria-label=\"search\">\r\n          <Search />\r\n        </IconButton>\r\n        <InputBase\r\n          className={classes.searchBar}\r\n          placeholder=\"Search new city...\"\r\n          inputProps={{ 'aria-label': 'search google maps' }}\r\n          value={citySearch}\r\n          onChange={e => handleSearchChange(e.target.value)}\r\n          inputRef={searchRef}\r\n        />\r\n      </div>\r\n      <h2>\r\n        <span className={classes.weatherTitle}>Weather</span> Forecast\r\n      </h2>\r\n\r\n      <div className={classes.citiesContainer}>\r\n        {citiesData &&\r\n          citiesData.map(city => {\r\n            return (\r\n              <div className={classes.cityItem} key={city.name}>\r\n                <img className={classes.cityImage} src={city.img} />\r\n                <div className={classes.cityName}>{city.name}</div>\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n\r\n      <Popper open={popperOpen} anchorEl={anchorEl} placement=\"bottom-start\" className={classes.popperBar}>\r\n        <Paper className={classes.popperPaper}>\r\n          <List>\r\n            {predictions &&\r\n              predictions.map((prediction, i) => {\r\n                return (\r\n                  <ListItem\r\n                    button\r\n                    onClick={() => handlePredictionSelect(prediction)}\r\n                    className={i === selectedPrediction ? classes.selected : ''}\r\n                  >\r\n                    {prediction}\r\n                  </ListItem>\r\n                );\r\n              })}\r\n          </List>\r\n        </Paper>\r\n      </Popper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, Icon } from '@material-ui/core';\r\nimport './style.css';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  graphContainer: {\r\n    display: 'flex',\r\n    height: '95%',\r\n    fontSize: '12px',\r\n    flexDirection: 'column'\r\n  },\r\n  graphItems: {\r\n    flexBasis: '15%',\r\n    display: 'flex',\r\n    alignItems: 'flex-end',\r\n    position: 'relative'\r\n  },\r\n  graphDayItem: {\r\n    paddingRight: '16px',\r\n    minWidth: '80px',\r\n    color: '#202d5d'\r\n  },\r\n  graphOtherItem: {\r\n    paddingRight: '6px',\r\n    paddingLeft: '6px',\r\n    minWidth: '60px',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    color: '#a4afb4',\r\n    fontSize: '15px'\r\n  },\r\n  graphOtherIcon: {\r\n    width: '100%',\r\n    textAlign: 'center'\r\n  },\r\n  graphBars: {\r\n    position: 'relative',\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    alignItems: 'flex-end'\r\n  },\r\n  graphLineContainer: {\r\n    width: '4px',\r\n    height: '100%',\r\n    position: 'absolute',\r\n    boxSizing: 'border-box',\r\n    paddingTop: '3em',\r\n    paddingBottom: '2em'\r\n  },\r\n  graphDottedLine: {\r\n    width: '100%',\r\n    height: '8px',\r\n    position: 'absolute',\r\n    boxSizing: 'border-box',\r\n    borderTop: '3px dotted #d4e3f5'\r\n  },\r\n  graphValueContainer: {\r\n    width: '100%',\r\n    height: '5px',\r\n    position: 'absolute',\r\n    boxSizing: 'border-box',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'flex-end'\r\n  },\r\n  graphValueLineHigh: {\r\n    width: '50%',\r\n    height: '8px',\r\n    background: '#e94b0c',\r\n    position: 'absolute',\r\n    left: '50%',\r\n    borderRadius: '0px 8px 8px 0px',\r\n    top: '-5px'\r\n  },\r\n  graphValueLineLow: {\r\n    width: '50%',\r\n    height: '8px',\r\n    background: '#d4e3f5',\r\n    position: 'absolute',\r\n    right: '50%',\r\n    borderRadius: '8px 0px 0px 8px',\r\n    top: '-5px'\r\n  }\r\n}));\r\n\r\nexport interface ForecastProps {\r\n  type: 'forecast';\r\n  data: {\r\n    day: string;\r\n    precip: string;\r\n    weatherId: string;\r\n    dayTemp: number;\r\n    highTemp: number;\r\n    lowTemp: number;\r\n  }[];\r\n}\r\n\r\nexport default function WeeklyForecast(props: ForecastProps) {\r\n  const classes = useStyles({});\r\n  // Titles default to rain type\r\n  let graphTitle = 'Precipitation';\r\n\r\n  // Gets the appropriate FA Icon depending on weather ID\r\n  const weatherIdToFAIcon = (weatherId: string) => {\r\n    let faClass = 'fa ';\r\n    let tempWeatherId = weatherId.substring(0, weatherId.length - 1);\r\n    switch (tempWeatherId) {\r\n      case '01':\r\n        faClass += 'fa-sun';\r\n        break;\r\n      case '02':\r\n        faClass += 'fa-cloud-sun';\r\n        break;\r\n      case '03':\r\n        faClass += 'fa-cloud';\r\n        break;\r\n      case '04':\r\n        faClass += 'fa-cloud';\r\n        break;\r\n      case '09':\r\n        faClass += 'fa-cloud-rain';\r\n        break;\r\n      case '10':\r\n        faClass += 'fa-cloud-sun-rain';\r\n        break;\r\n      case '11':\r\n        faClass += 'fa-bolt';\r\n        break;\r\n      case '13':\r\n        faClass += 'fa-snowflake';\r\n        break;\r\n      case '50':\r\n        faClass += 'fa-smog';\r\n        break;\r\n    }\r\n    return faClass;\r\n  };\r\n\r\n  // Calculates using average how wide bars should be\r\n  // Need to make this more meaningful kind of useless atm...\r\n  const calcHighLowWidth = (low: number, high: number) => {\r\n    let avg = (high + low) / 2;\r\n    let tempHigh = (high - avg) * 5;\r\n    if (tempHigh > 50) tempHigh = 50;\r\n    let tempLow = avg - low;\r\n    if (tempLow > 50) tempLow = 50;\r\n    return { low: tempLow, high: tempHigh };\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>{graphTitle}</div>\r\n      <div className={classes.graphContainer}>\r\n        {props.data.map(item => {\r\n          let barTempLengths = calcHighLowWidth(item.lowTemp, item.highTemp);\r\n          console.log(barTempLengths);\r\n          return (\r\n            <div className={classes.graphItems} key={item.day}>\r\n              <div className={classes.graphDayItem}>{item.day}</div>\r\n              <div className={classes.graphOtherItem}>\r\n                <Icon className=\"fa fa-tint\" /> {item.precip}%\r\n              </div>\r\n              <div className={classes.graphOtherItem}>\r\n                <Icon className={`${weatherIdToFAIcon(item.weatherId) + ' ' + classes.graphOtherIcon}`} />\r\n              </div>\r\n              <div className={classes.graphOtherItem}>{item.lowTemp}°C</div>\r\n              <div className={classes.graphBars}>\r\n                <div className={classes.graphDottedLine}></div>\r\n                <div className={classes.graphValueContainer}>\r\n                  <div style={{ height: '100%', width: '100%' }}>\r\n                    <div className={classes.graphValueLineLow} style={{ width: `${barTempLengths.low}%` }} />\r\n                    <div className={classes.graphValueLineHigh} style={{ width: `${barTempLengths.high}%` }} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className={classes.graphOtherItem}>{item.highTemp}°C</div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport TodayForecast from '../TodayForecast';\r\nimport CitySelect from '../CitySelect';\r\nimport WeeklyForecast, { ForecastProps } from '../WeeklyForecast';\r\nimport './style.css';\r\nimport { GraphProps } from '../TodayForecast/DataGraph';\r\nimport { TodayInfoProps } from '../TodayForecast/TodayInfo';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  mainContainer: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    height: '100%',\r\n    padding: '1em',\r\n    boxSizing: 'border-box'\r\n  },\r\n  leftContainer: {\r\n    order: 1,\r\n    flexBasis: '60%',\r\n    height: '100%',\r\n    padding: '32px',\r\n    boxSizing: 'border-box',\r\n    backgroundColor: '#f2fbff',\r\n    borderRadius: '20px 0px 0px 20px'\r\n  },\r\n  citySelectContainer: {\r\n    height: '50%'\r\n  },\r\n  forecastContainer: {\r\n    height: '50%'\r\n  },\r\n  rightContainer: {\r\n    order: 2,\r\n    flexBasis: '40%',\r\n    height: '100%',\r\n    padding: '32px',\r\n    boxSizing: 'border-box',\r\n    backgroundColor: '#100e3b',\r\n    borderRadius: '0px 20px 20px 0px'\r\n  }\r\n}));\r\n\r\nexport default function Dashboard() {\r\n  const classes = useStyles({});\r\n\r\n  // Data for Weekly Forecast\r\n  const forecastProps: ForecastProps = {\r\n    type: 'forecast',\r\n    data: [\r\n      { day: 'Monday', weatherId: '01d', precip: '50', highTemp: 27, lowTemp: 19, dayTemp: 25 },\r\n      { day: 'Tuesday', weatherId: '02d', precip: '50', highTemp: 28, lowTemp: 14, dayTemp: 16 },\r\n      { day: 'Wednesday', weatherId: '04d', precip: '50', highTemp: 31, lowTemp: 14, dayTemp: 16 },\r\n      { day: 'Thursday', weatherId: '03d', precip: '50', highTemp: 14, lowTemp: 14, dayTemp: 16 },\r\n      { day: 'Friday', weatherId: '02d', precip: '50', highTemp: 18, lowTemp: 14, dayTemp: 16 },\r\n      { day: 'Saturday', weatherId: '01d', precip: '50', highTemp: 24, lowTemp: 14, dayTemp: 16 },\r\n      { day: 'Sunday', weatherId: '04d', precip: '50', highTemp: 24, lowTemp: 14, dayTemp: 16 }\r\n    ]\r\n  };\r\n\r\n  // Data for Today Info\r\n  const todayData: TodayInfoProps = {\r\n    data: {\r\n      temp: 26,\r\n      city: 'Montreal, Quebec',\r\n      feelsLike: 28,\r\n      sunTime: 'Sunset : 20:18'\r\n    }\r\n  };\r\n\r\n  // Data for Graph on Today Info\r\n  const graphData: GraphProps = {\r\n    type: 'rain',\r\n    data: [\r\n      { title: '12PM', value: 50 },\r\n      { title: '2PM', value: 60 },\r\n      { title: '4PM', value: 70 },\r\n      { title: '6PM', value: 80 },\r\n      { title: '8PM', value: 90 },\r\n      { title: '10PM', value: 100 }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    <div className={classes.mainContainer}>\r\n      <div className={classes.leftContainer}>\r\n        <div className={classes.citySelectContainer}>\r\n          <CitySelect />\r\n        </div>\r\n        <div className={classes.forecastContainer}>\r\n          <WeeklyForecast type={forecastProps.type} data={forecastProps.data} />\r\n        </div>\r\n      </div>\r\n      <div className={classes.rightContainer}>\r\n        <TodayForecast todayData={todayData} graphData={graphData} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Dashboard from './Components/Dashboard';\n\nReactDOM.render(<Dashboard />, document.getElementById('root'));\n"],"sourceRoot":""}